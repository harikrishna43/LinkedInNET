//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// XML document found at '\src\Sparkle.LinkedInNET\..\LinkedInApiV2.xml'

#region ReturnTypes for Profiles

// WriteReturnTypes(Profiles, person)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'person'
    /// </summary>
    [Serializable, XmlRoot("person")]
    public class Person
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'firstName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstName")]
        [JsonProperty(PropertyName = "firstName")]
        public Common.MultiLocaleString FirstName { get; set; }

        /// <summary>
        /// Field: 'lastName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastName")]
        [JsonProperty(PropertyName = "lastName")]
        public Common.MultiLocaleString LastName { get; set; }

        /// <summary>
        /// Field: 'maidenName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "maidenName")]
        [JsonProperty(PropertyName = "maidenName")]
        public Common.MultiLocaleString MaidenName { get; set; }

        /// <summary>
        /// Field: 'headline' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headline")]
        [JsonProperty(PropertyName = "headline")]
        public Common.MultiLocaleString Headline { get; set; }

        /// <summary>
        /// Field: 'profilePicture' (on-demand)
        /// Field: 'profilePicture(displayImage~~~playableStreams)'
        /// </summary>
        [XmlElement(ElementName = "profilePicture")]
        [JsonProperty(PropertyName = "profilePicture")]
        public ProfilePicture ProfilePicture { get; set; }

        /// <summary>
        /// Field: 'vanityName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "vanityName")]
        [JsonProperty(PropertyName = "vanityName")]
        public string VanityName { get; set; }

    }
}

// WriteReturnTypes(Profiles, PersonList)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PersonList'
    /// </summary>
    [Serializable, XmlRoot("PersonList")]
    public class PersonList
    {
        /// <summary>
        /// Field: 'statuses' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "statuses")]
        [JsonProperty(PropertyName = "statuses")]
        public dynamic Statuses { get; set; }

        /// <summary>
        /// Field: 'results' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "results")]
        [JsonProperty(PropertyName = "results")]
        public dynamic Results { get; set; }

        /// <summary>
        /// Field: 'errors' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "errors")]
        [JsonProperty(PropertyName = "errors")]
        public dynamic Errors { get; set; }

    }
}

// WriteReturnTypes(Profiles, geoLocation)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'geoLocation'
    /// </summary>
    [Serializable, XmlRoot("geoLocation")]
    public class GeoLocation
    {
        /// <summary>
        /// Field: 'countryCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "countryCode")]
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Field: 'postalCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "postalCode")]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Field: 'standardizedLocationUrn' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "standardizedLocationUrn")]
        [JsonProperty(PropertyName = "standardizedLocationUrn")]
        public string StandardizedLocationUrn { get; set; }

        /// <summary>
        /// Field: 'userSelectedGeoPlaceCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "userSelectedGeoPlaceCode")]
        [JsonProperty(PropertyName = "userSelectedGeoPlaceCode")]
        public string UserSelectedGeoPlaceCode { get; set; }

    }
}

// WriteReturnTypes(Profiles, position)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'position'
    /// </summary>
    [Serializable, XmlRoot("position")]
    public class Position
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'company' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "company")]
        [JsonProperty(PropertyName = "company")]
        public string Company { get; set; }

        /// <summary>
        /// Field: 'companyName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "companyName")]
        [JsonProperty(PropertyName = "companyName")]
        public Common.MultiLocaleString CompanyName { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        [JsonProperty(PropertyName = "description")]
        public Common.MultiLocaleRichText Description { get; set; }

        /// <summary>
        /// Field: 'endMonthYear' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "endMonthYear")]
        [JsonProperty(PropertyName = "endMonthYear")]
        public DateParts EndMonthYear { get; set; }

        /// <summary>
        /// Field: 'geoLocation' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "geoLocation")]
        [JsonProperty(PropertyName = "geoLocation")]
        public GeoLocation GeoLocation { get; set; }

        /// <summary>
        /// Field: 'locationName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "locationName")]
        [JsonProperty(PropertyName = "locationName")]
        public Common.MultiLocaleRichText LocationName { get; set; }

        /// <summary>
        /// Field: 'richMediaAssociations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "richMediaAssociations")]
        [JsonProperty(PropertyName = "richMediaAssociations")]
        public List<RichMediaURN> RichMediaAssociations { get; set; }

        /// <summary>
        /// Field: 'startMonthYear' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "startMonthYear")]
        [JsonProperty(PropertyName = "startMonthYear")]
        public DateParts startMonthYear { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public Common.MultiLocaleString Title { get; set; }

    }
}

// WriteReturnTypes(Profiles, dateParts)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'dateParts'
    /// </summary>
    [Serializable, XmlRoot("dateParts")]
    public class DateParts
    {
        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        [JsonProperty(PropertyName = "year")]
        public short? Year { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        [JsonProperty(PropertyName = "month")]
        public short? Month { get; set; }

        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        [JsonProperty(PropertyName = "day")]
        public short? Day { get; set; }

    }
}

// WriteReturnTypes(Profiles, richMediaURN)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'richMediaURN'
    /// </summary>
    [Serializable, XmlRoot("richMediaURN")]
    public class RichMediaURN
    {
        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public JObject Content { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        [JsonProperty(PropertyName = "description")]
        public Common.MultiLocaleRichText Description { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// Field: 'member' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member")]
        [JsonProperty(PropertyName = "member")]
        public JObject Member { get; set; }

        /// <summary>
        /// Field: 'thumbnailImage' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "thumbnailImage")]
        [JsonProperty(PropertyName = "thumbnailImage")]
        public JObject ThumbnailImage { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public Common.MultiLocaleString title { get; set; }

    }
}

// WriteReturnTypes(Profiles, profilePicture)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'profilePicture'
    /// </summary>
    [Serializable, XmlRoot("profilePicture")]
    public class ProfilePicture
    {
        /// <summary>
        /// Field: 'displayImage' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "displayImage")]
        [JsonProperty(PropertyName = "displayImage")]
        public string DisplayImage { get; set; }

        /// <summary>
        /// Field: 'displayImage~' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "displayImage~")]
        [JsonProperty(PropertyName = "displayImage~")]
        public DisplayImageLoaded DisplayImageLoaded { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageLoaded)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageLoaded'
    /// </summary>
    [Serializable, XmlRoot("displayImageLoaded")]
    public class DisplayImageLoaded
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<DisplayImageElements> Elements { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageElements)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageElements'
    /// </summary>
    [Serializable, XmlRoot("displayImageElements")]
    public class DisplayImageElements
    {
        /// <summary>
        /// Field: 'artifact' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "artifact")]
        [JsonProperty(PropertyName = "artifact")]
        public string Artifact { get; set; }

        /// <summary>
        /// Field: 'authorizationMethod' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authorizationMethod")]
        [JsonProperty(PropertyName = "authorizationMethod")]
        public string AuthorizationMethod { get; set; }

        /// <summary>
        /// Field: 'identifiers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifiers")]
        [JsonProperty(PropertyName = "identifiers")]
        public List<DisplayImageElementIdentifiers> Identifiers { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageElementIdentifiers)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageElementIdentifiers'
    /// </summary>
    [Serializable, XmlRoot("displayImageElementIdentifiers")]
    public class DisplayImageElementIdentifiers
    {
        /// <summary>
        /// Field: 'identifier' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifier")]
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Field: 'file' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "file")]
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Field: 'index' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "index")]
        [JsonProperty(PropertyName = "index")]
        public string Index { get; set; }

        /// <summary>
        /// Field: 'mediaType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaType")]
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Field: 'identifierExpiresInSeconds' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifierExpiresInSeconds")]
        [JsonProperty(PropertyName = "identifierExpiresInSeconds")]
        public long? IdentifierExpiresInSeconds { get; set; }

    }
}

// WriteReturnTypes(Profiles, DegreeSize)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'DegreeSize'
    /// </summary>
    [Serializable, XmlRoot("DegreeSize")]
    public class DegreeSize
    {
        /// <summary>
        /// Field: 'firstDegreeSize' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstDegreeSize")]
        [JsonProperty(PropertyName = "firstDegreeSize")]
        public int FirstDegreeSize { get; set; }

    }
}

// WriteReturnTypeFields(Profiles)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'person', 'PersonList', 'geoLocation', 'position', 'dateParts', 'richMediaURN', 'profilePicture', 'displayImageLoaded', 'displayImageElements', 'displayImageElementIdentifiers', 'DegreeSize' return types.
    /// </summary>
    public static class ProfilesFields {
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithId(this FieldSelector<Person> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'firstName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFirstName(this FieldSelector<Person> me) { return me.Add("firstName"); }
        
        /// <summary>
        /// Includes the field 'lastName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastName(this FieldSelector<Person> me) { return me.Add("lastName"); }
        
        /// <summary>
        /// Includes the field 'maidenName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMaidenName(this FieldSelector<Person> me) { return me.Add("maidenName"); }
        
        /// <summary>
        /// Includes the field 'headline'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHeadline(this FieldSelector<Person> me) { return me.Add("headline"); }
        
        /// <summary>
        /// Includes the field 'profilePicture(displayImage~~~playableStreams)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDisplayImageLoaded(this FieldSelector<Person> me) { return me.Add("profilePicture(displayImage~~~playableStreams)"); }
        
        /// <summary>
        /// Includes the field 'vanityName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithVanityName(this FieldSelector<Person> me) { return me.Add("vanityName"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAllFields(this FieldSelector<Person> me) { return me.AddRange("id", "firstName", "lastName", "maidenName", "headline", "profilePicture(displayImage~~~playableStreams)", "vanityName"); }
        
        /// <summary>
        /// Includes the field 'statuses'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonList> WithStatuses(this FieldSelector<PersonList> me) { return me.Add("statuses"); }
        
        /// <summary>
        /// Includes the field 'results'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonList> WithResults(this FieldSelector<PersonList> me) { return me.Add("results"); }
        
        /// <summary>
        /// Includes the field 'errors'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonList> WithErrors(this FieldSelector<PersonList> me) { return me.Add("errors"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonList> WithAllFields(this FieldSelector<PersonList> me) { return me.AddRange("statuses", "results", "errors"); }
        
        /// <summary>
        /// Includes the field 'firstDegreeSize'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DegreeSize> WithFirstDegreeSize(this FieldSelector<DegreeSize> me) { return me.Add("firstDegreeSize"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DegreeSize> WithAllFields(this FieldSelector<DegreeSize> me) { return me.AddRange("firstDegreeSize"); }
        
    }
}

#endregion

#region ReturnTypes for Organizations

// WriteReturnTypes(Organizations, mentions)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'mentions'
    /// </summary>
    [Serializable, XmlRoot("mentions")]
    public class Mentions
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<OrgElement> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Organizations, orgElement)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'orgElement'
    /// </summary>
    [Serializable, XmlRoot("orgElement")]
    public class OrgElement
    {
        /// <summary>
        /// Field: 'entity~' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity~")]
        [JsonProperty(PropertyName = "entity~")]
        public Organization orgData { get; set; }

        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string entityURN { get; set; }

    }
}

// WriteReturnTypes(Organizations, organization)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'organization'
    /// </summary>
    [Serializable, XmlRoot("organization")]
    public class Organization
    {
        /// <summary>
        /// Field: 'id' (default)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Field: 'name' (default)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.MultiLocaleString Name { get; set; }

        /// <summary>
        /// Field: 'logoV2' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "logoV2")]
        [JsonProperty(PropertyName = "logoV2")]
        public CroppedImage Logo { get; set; }

        /// <summary>
        /// Field: 'vanityName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "vanityName")]
        [JsonProperty(PropertyName = "vanityName")]
        public string VanityName { get; set; }

    }
}

// WriteReturnTypes(Organizations, croppedImage)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'croppedImage'
    /// </summary>
    [Serializable, XmlRoot("croppedImage")]
    public class CroppedImage
    {
        /// <summary>
        /// Field: 'height' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "height")]
        [JsonProperty(PropertyName = "height")]
        public int Height { get; set; }

        /// <summary>
        /// Field: 'width' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "width")]
        [JsonProperty(PropertyName = "width")]
        public int Width { get; set; }

        /// <summary>
        /// Field: 'x' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "x")]
        [JsonProperty(PropertyName = "x")]
        public int X { get; set; }

        /// <summary>
        /// Field: 'y' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "y")]
        [JsonProperty(PropertyName = "y")]
        public int Y { get; set; }

        /// <summary>
        /// Field: 'cropped' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "cropped")]
        [JsonProperty(PropertyName = "cropped")]
        public string Cropped { get; set; }

        /// <summary>
        /// Field: 'original~' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "original~")]
        [JsonProperty(PropertyName = "original~")]
        public dynamic OriginalObj { get; set; }

        /// <summary>
        /// Field: 'original' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "original")]
        [JsonProperty(PropertyName = "original")]
        public string Original { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrganizationalEntityAcls)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrganizationalEntityAcls'
    /// </summary>
    [Serializable, XmlRoot("OrganizationalEntityAcls")]
    public class OrganizationalEntityAcls
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// Field: 'elements*(*,organizationalTarget~(id))'
        /// Field: 'elements*(*,organizationalTarget~(logo))'
        /// Field: 'elements*(*,organizationalTarget~(name))'
        /// Field: 'elements*(*,organizationalTarget~(id,logo,name))'
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<OrgEntElements> Elements { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrgEntElements)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrgEntElements'
    /// </summary>
    [Serializable, XmlRoot("OrgEntElements")]
    public class OrgEntElements
    {
        /// <summary>
        /// Field: 'state' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "state")]
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Field: 'role' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "role")]
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Field: 'roleAssignee' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "roleAssignee")]
        [JsonProperty(PropertyName = "roleAssignee")]
        public string RoleAssignee { get; set; }

        /// <summary>
        /// Field: 'organizationalTarget' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organizationalTarget")]
        [JsonProperty(PropertyName = "organizationalTarget")]
        public string OrganizationalTarget { get; set; }

        /// <summary>
        /// Field: 'organizationalTarget~' (on-demand)
        /// Field: 'organizationalTarget~(id)'
        /// </summary>
        [XmlElement(ElementName = "organizationalTarget~")]
        [JsonProperty(PropertyName = "organizationalTarget~")]
        public Organization Organization { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrgFollowerStatistic)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrgFollowerStatistic'
    /// </summary>
    [Serializable, XmlRoot("OrgFollowerStatistic")]
    public class OrgFollowerStatistic
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<OrgFollowerStatisticsElement> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrganizationPageStatistics)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrganizationPageStatistics'
    /// </summary>
    [Serializable, XmlRoot("OrganizationPageStatistics")]
    public class OrganizationPageStatistics
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<OrganizationPageStatisticsElement> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrganizationPageStatisticsElement)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrganizationPageStatisticsElement'
    /// </summary>
    [Serializable, XmlRoot("OrganizationPageStatisticsElement")]
    public class OrganizationPageStatisticsElement
    {
        /// <summary>
        /// Field: 'organization' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organization")]
        [JsonProperty(PropertyName = "organization")]
        public string Organization { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsByCountry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsByCountry")]
        [JsonProperty(PropertyName = "pageStatisticsByCountry")]
        public List<PageStatisticsByCountry> PageStatisticsByCountry { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsByFunction' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsByFunction")]
        [JsonProperty(PropertyName = "pageStatisticsByFunction")]
        public List<PageStatisticsByFunction> PageStatisticsByFunction { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsByIndustry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsByIndustry")]
        [JsonProperty(PropertyName = "pageStatisticsByIndustry")]
        public List<PageStatisticsByIndustry> PageStatisticsByIndustry { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsByRegion' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsByRegion")]
        [JsonProperty(PropertyName = "pageStatisticsByRegion")]
        public List<PageStatisticsByRegion> PageStatisticsByRegion { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsBySeniority' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsBySeniority")]
        [JsonProperty(PropertyName = "pageStatisticsBySeniority")]
        public List<PageStatisticsBySeniority> PageStatisticsBySeniority { get; set; }

        /// <summary>
        /// Field: 'pageStatisticsByStaffCountRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatisticsByStaffCountRange")]
        [JsonProperty(PropertyName = "pageStatisticsByStaffCountRange")]
        public List<PageStatisticsByStaffCountRange> PageStatisticsByStaffCountRange { get; set; }

        /// <summary>
        /// Field: 'totalPageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "totalPageStatistics")]
        [JsonProperty(PropertyName = "totalPageStatistics")]
        public TotalPageStatistics TotalPageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsByCountry)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsByCountry'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsByCountry")]
    public class PageStatisticsByCountry
    {
        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsByFunction)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsByFunction'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsByFunction")]
    public class PageStatisticsByFunction
    {
        /// <summary>
        /// Field: 'function' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "function")]
        [JsonProperty(PropertyName = "function")]
        public string Function { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsByIndustry)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsByIndustry'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsByIndustry")]
    public class PageStatisticsByIndustry
    {
        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        [JsonProperty(PropertyName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsByRegion)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsByRegion'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsByRegion")]
    public class PageStatisticsByRegion
    {
        /// <summary>
        /// Field: 'region' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "region")]
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsBySeniority)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsBySeniority'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsBySeniority")]
    public class PageStatisticsBySeniority
    {
        /// <summary>
        /// Field: 'seniority' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "seniority")]
        [JsonProperty(PropertyName = "seniority")]
        public string Seniority { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatisticsByStaffCountRange)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatisticsByStaffCountRange'
    /// </summary>
    [Serializable, XmlRoot("PageStatisticsByStaffCountRange")]
    public class PageStatisticsByStaffCountRange
    {
        /// <summary>
        /// Field: 'staffCountRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "staffCountRange")]
        [JsonProperty(PropertyName = "staffCountRange")]
        public string StaffCountRange { get; set; }

        /// <summary>
        /// Field: 'pageStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageStatistics")]
        [JsonProperty(PropertyName = "pageStatistics")]
        public PageStatistics PageStatistics { get; set; }

    }
}

// WriteReturnTypes(Organizations, TotalPageStatistics)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TotalPageStatistics'
    /// </summary>
    [Serializable, XmlRoot("TotalPageStatistics")]
    public class TotalPageStatistics
    {
        /// <summary>
        /// Field: 'clicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "clicks")]
        [JsonProperty(PropertyName = "clicks")]
        public Clicks Clicks { get; set; }

        /// <summary>
        /// Field: 'views' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "views")]
        [JsonProperty(PropertyName = "views")]
        public Views Views { get; set; }

    }
}

// WriteReturnTypes(Organizations, Clicks)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Clicks'
    /// </summary>
    [Serializable, XmlRoot("Clicks")]
    public class Clicks
    {
        /// <summary>
        /// Field: 'careersPageClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageClicks")]
        [JsonProperty(PropertyName = "careersPageClicks")]
        public CareersPageClicks CareersPageClicks { get; set; }

        /// <summary>
        /// Field: 'mobileCareersPageClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mobileCareersPageClicks")]
        [JsonProperty(PropertyName = "mobileCareersPageClicks")]
        public MobileCareersPageClicks MobileCareersPageClicks { get; set; }

    }
}

// WriteReturnTypes(Organizations, CareersPageClicks)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CareersPageClicks'
    /// </summary>
    [Serializable, XmlRoot("CareersPageClicks")]
    public class CareersPageClicks
    {
        /// <summary>
        /// Field: 'careersPageBannerPromoClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageBannerPromoClicks")]
        [JsonProperty(PropertyName = "careersPageBannerPromoClicks")]
        public int CareersPageBannerPromoClicks { get; set; }

        /// <summary>
        /// Field: 'careersPageEmployeesClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageEmployeesClicks")]
        [JsonProperty(PropertyName = "careersPageEmployeesClicks")]
        public int CareersPageEmployeesClicks { get; set; }

        /// <summary>
        /// Field: 'careersPageJobsClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageJobsClicks")]
        [JsonProperty(PropertyName = "careersPageJobsClicks")]
        public int CareersPageJobsClicks { get; set; }

        /// <summary>
        /// Field: 'careersPagePromoLinksClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPagePromoLinksClicks")]
        [JsonProperty(PropertyName = "careersPagePromoLinksClicks")]
        public int CareersPagePromoLinksClicks { get; set; }

    }
}

// WriteReturnTypes(Organizations, MobileCareersPageClicks)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'MobileCareersPageClicks'
    /// </summary>
    [Serializable, XmlRoot("MobileCareersPageClicks")]
    public class MobileCareersPageClicks
    {
        /// <summary>
        /// Field: 'careersPageEmployeesClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageEmployeesClicks")]
        [JsonProperty(PropertyName = "careersPageEmployeesClicks")]
        public int CareersPageEmployeesClicks { get; set; }

        /// <summary>
        /// Field: 'careersPageJobsClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageJobsClicks")]
        [JsonProperty(PropertyName = "careersPageJobsClicks")]
        public int CareersPageJobsClicks { get; set; }

        /// <summary>
        /// Field: 'careersPagePromoLinksClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPagePromoLinksClicks")]
        [JsonProperty(PropertyName = "careersPagePromoLinksClicks")]
        public int CareersPagePromoLinksClicks { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageStatistics)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageStatistics'
    /// </summary>
    [Serializable, XmlRoot("PageStatistics")]
    public class PageStatistics
    {
        /// <summary>
        /// Field: 'views' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "views")]
        [JsonProperty(PropertyName = "views")]
        public Views Views { get; set; }

    }
}

// WriteReturnTypes(Organizations, Views)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Views'
    /// </summary>
    [Serializable, XmlRoot("Views")]
    public class Views
    {
        /// <summary>
        /// Field: 'allDesktopPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "allDesktopPageViews")]
        [JsonProperty(PropertyName = "allDesktopPageViews")]
        public PageViews AllDesktopPageViews { get; set; }

        /// <summary>
        /// Field: 'allMobilePageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "allMobilePageViews")]
        [JsonProperty(PropertyName = "allMobilePageViews")]
        public PageViews AllMobilePageViews { get; set; }

        /// <summary>
        /// Field: 'allPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "allPageViews")]
        [JsonProperty(PropertyName = "allPageViews")]
        public PageViews AllPageViews { get; set; }

        /// <summary>
        /// Field: 'careersPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "careersPageViews")]
        [JsonProperty(PropertyName = "careersPageViews")]
        public PageViews CareersPageViews { get; set; }

        /// <summary>
        /// Field: 'desktopCareersPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "desktopCareersPageViews")]
        [JsonProperty(PropertyName = "desktopCareersPageViews")]
        public PageViews DesktopCareersPageViews { get; set; }

        /// <summary>
        /// Field: 'desktopJobsPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "desktopJobsPageViews")]
        [JsonProperty(PropertyName = "desktopJobsPageViews")]
        public PageViews DesktopJobsPageViews { get; set; }

        /// <summary>
        /// Field: 'desktopLifeAtPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "desktopLifeAtPageViews")]
        [JsonProperty(PropertyName = "desktopLifeAtPageViews")]
        public PageViews DesktopLifeAtPageViews { get; set; }

        /// <summary>
        /// Field: 'desktopOverviewPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "desktopOverviewPageViews")]
        [JsonProperty(PropertyName = "desktopOverviewPageViews")]
        public PageViews DesktopOverviewPageViews { get; set; }

        /// <summary>
        /// Field: 'jobsPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "jobsPageViews")]
        [JsonProperty(PropertyName = "jobsPageViews")]
        public PageViews JobsPageViews { get; set; }

        /// <summary>
        /// Field: 'lifeAtPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lifeAtPageViews")]
        [JsonProperty(PropertyName = "lifeAtPageViews")]
        public PageViews LifeAtPageViews { get; set; }

        /// <summary>
        /// Field: 'mobileCareersPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mobileCareersPageViews")]
        [JsonProperty(PropertyName = "mobileCareersPageViews")]
        public PageViews MobileCareersPageViews { get; set; }

        /// <summary>
        /// Field: 'mobileJobsPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mobileJobsPageViews")]
        [JsonProperty(PropertyName = "mobileJobsPageViews")]
        public PageViews MobileJobsPageViews { get; set; }

        /// <summary>
        /// Field: 'mobileLifeAtPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mobileLifeAtPageViews")]
        [JsonProperty(PropertyName = "mobileLifeAtPageViews")]
        public PageViews MobileLifeAtPageViews { get; set; }

        /// <summary>
        /// Field: 'mobileOverviewPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mobileOverviewPageViews")]
        [JsonProperty(PropertyName = "mobileOverviewPageViews")]
        public PageViews MobileOverviewPageViews { get; set; }

        /// <summary>
        /// Field: 'overviewPageViews' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "overviewPageViews")]
        [JsonProperty(PropertyName = "overviewPageViews")]
        public PageViews OverviewPageViews { get; set; }

    }
}

// WriteReturnTypes(Organizations, PageViews)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PageViews'
    /// </summary>
    [Serializable, XmlRoot("PageViews")]
    public class PageViews
    {
        /// <summary>
        /// Field: 'pageViewsCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "pageViewsCount")]
        [JsonProperty(PropertyName = "pageViewsCount")]
        public int PageViewsCount { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrgFollowerStatisticsElement)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrgFollowerStatisticsElement'
    /// </summary>
    [Serializable, XmlRoot("OrgFollowerStatisticsElement")]
    public class OrgFollowerStatisticsElement
    {
        /// <summary>
        /// Field: 'followerCountsByStaffCountRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByStaffCountRange")]
        [JsonProperty(PropertyName = "followerCountsByStaffCountRange")]
        public List<FollowerByStaffCountRange> FollowerCountsByStaffCountRange { get; set; }

        /// <summary>
        /// Field: 'followerCountsByFunction' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByFunction")]
        [JsonProperty(PropertyName = "followerCountsByFunction")]
        public List<FollowerByFunction> FollowerCountsByFunction { get; set; }

        /// <summary>
        /// Field: 'followerCountsByIndustry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByIndustry")]
        [JsonProperty(PropertyName = "followerCountsByIndustry")]
        public List<FollowerByIndustry> FollowerCountsByIndustry { get; set; }

        /// <summary>
        /// Field: 'followerCountsByAssociationType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByAssociationType")]
        [JsonProperty(PropertyName = "followerCountsByAssociationType")]
        public List<FollowerCounts> FollowerCountsByAssociationType { get; set; }

        /// <summary>
        /// Field: 'followerCountsBySeniority' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsBySeniority")]
        [JsonProperty(PropertyName = "followerCountsBySeniority")]
        public List<FollowerBySeniority> FollowerCountsBySeniority { get; set; }

        /// <summary>
        /// Field: 'followerCountsByRegion' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByRegion")]
        [JsonProperty(PropertyName = "followerCountsByRegion")]
        public List<FollowerByRegion> FollowerCountsByRegion { get; set; }

        /// <summary>
        /// Field: 'followerCountsByCountry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCountsByCountry")]
        [JsonProperty(PropertyName = "followerCountsByCountry")]
        public List<FollowerByCountry> FollowerCountsByCountry { get; set; }

        /// <summary>
        /// Field: 'organizationalEntity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organizationalEntity")]
        [JsonProperty(PropertyName = "organizationalEntity")]
        public string OrganizationalEntity { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerByFunction)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerByFunction'
    /// </summary>
    [Serializable, XmlRoot("FollowerByFunction")]
    public class FollowerByFunction
    {
        /// <summary>
        /// Field: 'function' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "function")]
        [JsonProperty(PropertyName = "function")]
        public string Function { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerByIndustry)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerByIndustry'
    /// </summary>
    [Serializable, XmlRoot("FollowerByIndustry")]
    public class FollowerByIndustry
    {
        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        [JsonProperty(PropertyName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerBySeniority)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerBySeniority'
    /// </summary>
    [Serializable, XmlRoot("FollowerBySeniority")]
    public class FollowerBySeniority
    {
        /// <summary>
        /// Field: 'seniority' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "seniority")]
        [JsonProperty(PropertyName = "seniority")]
        public string Seniority { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerByStaffCountRange)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerByStaffCountRange'
    /// </summary>
    [Serializable, XmlRoot("FollowerByStaffCountRange")]
    public class FollowerByStaffCountRange
    {
        /// <summary>
        /// Field: 'staffCountRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "staffCountRange")]
        [JsonProperty(PropertyName = "staffCountRange")]
        public string StaffCountRange { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerByRegion)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerByRegion'
    /// </summary>
    [Serializable, XmlRoot("FollowerByRegion")]
    public class FollowerByRegion
    {
        /// <summary>
        /// Field: 'region' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "region")]
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerByCountry)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerByCountry'
    /// </summary>
    [Serializable, XmlRoot("FollowerByCountry")]
    public class FollowerByCountry
    {
        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Field: 'followerCounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "followerCounts")]
        [JsonProperty(PropertyName = "followerCounts")]
        public FollowerCounts FollowerCounts { get; set; }

    }
}

// WriteReturnTypes(Organizations, FollowerCounts)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'FollowerCounts'
    /// </summary>
    [Serializable, XmlRoot("FollowerCounts")]
    public class FollowerCounts
    {
        /// <summary>
        /// Field: 'organicFollowerCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organicFollowerCount")]
        [JsonProperty(PropertyName = "organicFollowerCount")]
        public int OrganicFollowerCount { get; set; }

        /// <summary>
        /// Field: 'paidFollowerCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paidFollowerCount")]
        [JsonProperty(PropertyName = "paidFollowerCount")]
        public int PaidFollowerCount { get; set; }

    }
}

// WriteReturnTypeFields(Organizations)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'mentions', 'orgElement', 'organization', 'croppedImage', 'OrganizationalEntityAcls', 'OrgEntElements', 'OrgFollowerStatistic', 'OrganizationPageStatistics', 'OrganizationPageStatisticsElement', 'PageStatisticsByCountry', 'PageStatisticsByFunction', 'PageStatisticsByIndustry', 'PageStatisticsByRegion', 'PageStatisticsBySeniority', 'PageStatisticsByStaffCountRange', 'TotalPageStatistics', 'Clicks', 'CareersPageClicks', 'MobileCareersPageClicks', 'PageStatistics', 'Views', 'PageViews', 'OrgFollowerStatisticsElement', 'FollowerByFunction', 'FollowerByIndustry', 'FollowerBySeniority', 'FollowerByStaffCountRange', 'FollowerByRegion', 'FollowerByCountry', 'FollowerCounts' return types.
    /// </summary>
    public static class OrganizationsFields {
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Mentions> WithElements(this FieldSelector<Mentions> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Mentions> WithPaging(this FieldSelector<Mentions> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Mentions> WithAllFields(this FieldSelector<Mentions> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithId(this FieldSelector<Organization> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithName(this FieldSelector<Organization> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'logoV2'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithLogoV2(this FieldSelector<Organization> me) { return me.Add("logoV2"); }
        
        /// <summary>
        /// Includes the field 'vanityName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithVanityName(this FieldSelector<Organization> me) { return me.Add("vanityName"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithAllFields(this FieldSelector<Organization> me) { return me.AddRange("id", "name", "logoV2", "vanityName"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(id))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsId(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(id))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(logo))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsLogo(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(logo))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(name))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsName(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(name))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(id,logo,name))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsAll(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(id,logo,name))"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithAllFields(this FieldSelector<OrganizationalEntityAcls> me) { return me.AddRange("elements*(*,organizationalTarget~(id))", "elements*(*,organizationalTarget~(logo))", "elements*(*,organizationalTarget~(name))", "elements*(*,organizationalTarget~(id,logo,name))"); }
        
        /// <summary>
        /// Includes the field 'state'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithState(this FieldSelector<OrgEntElements> me) { return me.Add("state"); }
        
        /// <summary>
        /// Includes the field 'role'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithRole(this FieldSelector<OrgEntElements> me) { return me.Add("role"); }
        
        /// <summary>
        /// Includes the field 'roleAssignee'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithRoleAssignee(this FieldSelector<OrgEntElements> me) { return me.Add("roleAssignee"); }
        
        /// <summary>
        /// Includes the field 'organizationalTarget'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithOrganizationalTarget(this FieldSelector<OrgEntElements> me) { return me.Add("organizationalTarget"); }
        
        /// <summary>
        /// Includes the field 'organizationalTarget~(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithOrganization(this FieldSelector<OrgEntElements> me) { return me.Add("organizationalTarget~(id)"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithAllFields(this FieldSelector<OrgEntElements> me) { return me.AddRange("state", "role", "roleAssignee", "organizationalTarget", "organizationalTarget~(id)"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatistic> WithElements(this FieldSelector<OrgFollowerStatistic> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatistic> WithPaging(this FieldSelector<OrgFollowerStatistic> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatistic> WithAllFields(this FieldSelector<OrgFollowerStatistic> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatistics> WithElements(this FieldSelector<OrganizationPageStatistics> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatistics> WithPaging(this FieldSelector<OrganizationPageStatistics> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatistics> WithAllFields(this FieldSelector<OrganizationPageStatistics> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'organization'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithOrganization(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("organization"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsByCountry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsByCountry(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsByCountry"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsByFunction'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsByFunction(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsByFunction"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsByIndustry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsByIndustry(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsByIndustry"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsByRegion'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsByRegion(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsByRegion"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsBySeniority'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsBySeniority(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsBySeniority"); }
        
        /// <summary>
        /// Includes the field 'pageStatisticsByStaffCountRange'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithPageStatisticsByStaffCountRange(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("pageStatisticsByStaffCountRange"); }
        
        /// <summary>
        /// Includes the field 'totalPageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithTotalPageStatistics(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.Add("totalPageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationPageStatisticsElement> WithAllFields(this FieldSelector<OrganizationPageStatisticsElement> me) { return me.AddRange("organization", "pageStatisticsByCountry", "pageStatisticsByFunction", "pageStatisticsByIndustry", "pageStatisticsByRegion", "pageStatisticsBySeniority", "pageStatisticsByStaffCountRange", "totalPageStatistics"); }
        
        /// <summary>
        /// Includes the field 'country'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByCountry> WithCountry(this FieldSelector<PageStatisticsByCountry> me) { return me.Add("country"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByCountry> WithPageStatistics(this FieldSelector<PageStatisticsByCountry> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByCountry> WithAllFields(this FieldSelector<PageStatisticsByCountry> me) { return me.AddRange("country", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'function'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByFunction> WithFunction(this FieldSelector<PageStatisticsByFunction> me) { return me.Add("function"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByFunction> WithPageStatistics(this FieldSelector<PageStatisticsByFunction> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByFunction> WithAllFields(this FieldSelector<PageStatisticsByFunction> me) { return me.AddRange("function", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'industry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByIndustry> WithIndustry(this FieldSelector<PageStatisticsByIndustry> me) { return me.Add("industry"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByIndustry> WithPageStatistics(this FieldSelector<PageStatisticsByIndustry> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByIndustry> WithAllFields(this FieldSelector<PageStatisticsByIndustry> me) { return me.AddRange("industry", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'region'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByRegion> WithRegion(this FieldSelector<PageStatisticsByRegion> me) { return me.Add("region"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByRegion> WithPageStatistics(this FieldSelector<PageStatisticsByRegion> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByRegion> WithAllFields(this FieldSelector<PageStatisticsByRegion> me) { return me.AddRange("region", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'seniority'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsBySeniority> WithSeniority(this FieldSelector<PageStatisticsBySeniority> me) { return me.Add("seniority"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsBySeniority> WithPageStatistics(this FieldSelector<PageStatisticsBySeniority> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsBySeniority> WithAllFields(this FieldSelector<PageStatisticsBySeniority> me) { return me.AddRange("seniority", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'staffCountRange'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByStaffCountRange> WithStaffCountRange(this FieldSelector<PageStatisticsByStaffCountRange> me) { return me.Add("staffCountRange"); }
        
        /// <summary>
        /// Includes the field 'pageStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByStaffCountRange> WithPageStatistics(this FieldSelector<PageStatisticsByStaffCountRange> me) { return me.Add("pageStatistics"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatisticsByStaffCountRange> WithAllFields(this FieldSelector<PageStatisticsByStaffCountRange> me) { return me.AddRange("staffCountRange", "pageStatistics"); }
        
        /// <summary>
        /// Includes the field 'clicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalPageStatistics> WithClicks(this FieldSelector<TotalPageStatistics> me) { return me.Add("clicks"); }
        
        /// <summary>
        /// Includes the field 'views'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalPageStatistics> WithViews(this FieldSelector<TotalPageStatistics> me) { return me.Add("views"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalPageStatistics> WithAllFields(this FieldSelector<TotalPageStatistics> me) { return me.AddRange("clicks", "views"); }
        
        /// <summary>
        /// Includes the field 'careersPageClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Clicks> WithCareersPageClicks(this FieldSelector<Clicks> me) { return me.Add("careersPageClicks"); }
        
        /// <summary>
        /// Includes the field 'mobileCareersPageClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Clicks> WithMobileCareersPageClicks(this FieldSelector<Clicks> me) { return me.Add("mobileCareersPageClicks"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Clicks> WithAllFields(this FieldSelector<Clicks> me) { return me.AddRange("careersPageClicks", "mobileCareersPageClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPageBannerPromoClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CareersPageClicks> WithCareersPageBannerPromoClicks(this FieldSelector<CareersPageClicks> me) { return me.Add("careersPageBannerPromoClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPageEmployeesClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CareersPageClicks> WithCareersPageEmployeesClicks(this FieldSelector<CareersPageClicks> me) { return me.Add("careersPageEmployeesClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPageJobsClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CareersPageClicks> WithCareersPageJobsClicks(this FieldSelector<CareersPageClicks> me) { return me.Add("careersPageJobsClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPagePromoLinksClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CareersPageClicks> WithCareersPagePromoLinksClicks(this FieldSelector<CareersPageClicks> me) { return me.Add("careersPagePromoLinksClicks"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CareersPageClicks> WithAllFields(this FieldSelector<CareersPageClicks> me) { return me.AddRange("careersPageBannerPromoClicks", "careersPageEmployeesClicks", "careersPageJobsClicks", "careersPagePromoLinksClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPageEmployeesClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<MobileCareersPageClicks> WithCareersPageEmployeesClicks(this FieldSelector<MobileCareersPageClicks> me) { return me.Add("careersPageEmployeesClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPageJobsClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<MobileCareersPageClicks> WithCareersPageJobsClicks(this FieldSelector<MobileCareersPageClicks> me) { return me.Add("careersPageJobsClicks"); }
        
        /// <summary>
        /// Includes the field 'careersPagePromoLinksClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<MobileCareersPageClicks> WithCareersPagePromoLinksClicks(this FieldSelector<MobileCareersPageClicks> me) { return me.Add("careersPagePromoLinksClicks"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<MobileCareersPageClicks> WithAllFields(this FieldSelector<MobileCareersPageClicks> me) { return me.AddRange("careersPageEmployeesClicks", "careersPageJobsClicks", "careersPagePromoLinksClicks"); }
        
        /// <summary>
        /// Includes the field 'views'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatistics> WithViews(this FieldSelector<PageStatistics> me) { return me.Add("views"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageStatistics> WithAllFields(this FieldSelector<PageStatistics> me) { return me.AddRange("views"); }
        
        /// <summary>
        /// Includes the field 'allDesktopPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithAllDesktopPageViews(this FieldSelector<Views> me) { return me.Add("allDesktopPageViews"); }
        
        /// <summary>
        /// Includes the field 'allMobilePageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithAllMobilePageViews(this FieldSelector<Views> me) { return me.Add("allMobilePageViews"); }
        
        /// <summary>
        /// Includes the field 'allPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithAllPageViews(this FieldSelector<Views> me) { return me.Add("allPageViews"); }
        
        /// <summary>
        /// Includes the field 'careersPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithCareersPageViews(this FieldSelector<Views> me) { return me.Add("careersPageViews"); }
        
        /// <summary>
        /// Includes the field 'desktopCareersPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithDesktopCareersPageViews(this FieldSelector<Views> me) { return me.Add("desktopCareersPageViews"); }
        
        /// <summary>
        /// Includes the field 'desktopJobsPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithDesktopJobsPageViews(this FieldSelector<Views> me) { return me.Add("desktopJobsPageViews"); }
        
        /// <summary>
        /// Includes the field 'desktopLifeAtPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithDesktopLifeAtPageViews(this FieldSelector<Views> me) { return me.Add("desktopLifeAtPageViews"); }
        
        /// <summary>
        /// Includes the field 'desktopOverviewPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithDesktopOverviewPageViews(this FieldSelector<Views> me) { return me.Add("desktopOverviewPageViews"); }
        
        /// <summary>
        /// Includes the field 'jobsPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithJobsPageViews(this FieldSelector<Views> me) { return me.Add("jobsPageViews"); }
        
        /// <summary>
        /// Includes the field 'lifeAtPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithLifeAtPageViews(this FieldSelector<Views> me) { return me.Add("lifeAtPageViews"); }
        
        /// <summary>
        /// Includes the field 'mobileCareersPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithMobileCareersPageViews(this FieldSelector<Views> me) { return me.Add("mobileCareersPageViews"); }
        
        /// <summary>
        /// Includes the field 'mobileJobsPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithMobileJobsPageViews(this FieldSelector<Views> me) { return me.Add("mobileJobsPageViews"); }
        
        /// <summary>
        /// Includes the field 'mobileLifeAtPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithMobileLifeAtPageViews(this FieldSelector<Views> me) { return me.Add("mobileLifeAtPageViews"); }
        
        /// <summary>
        /// Includes the field 'mobileOverviewPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithMobileOverviewPageViews(this FieldSelector<Views> me) { return me.Add("mobileOverviewPageViews"); }
        
        /// <summary>
        /// Includes the field 'overviewPageViews'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithOverviewPageViews(this FieldSelector<Views> me) { return me.Add("overviewPageViews"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Views> WithAllFields(this FieldSelector<Views> me) { return me.AddRange("allDesktopPageViews", "allMobilePageViews", "allPageViews", "careersPageViews", "desktopCareersPageViews", "desktopJobsPageViews", "desktopLifeAtPageViews", "desktopOverviewPageViews", "jobsPageViews", "lifeAtPageViews", "mobileCareersPageViews", "mobileJobsPageViews", "mobileLifeAtPageViews", "mobileOverviewPageViews", "overviewPageViews"); }
        
        /// <summary>
        /// Includes the field 'pageViewsCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageViews> WithPageViewsCount(this FieldSelector<PageViews> me) { return me.Add("pageViewsCount"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PageViews> WithAllFields(this FieldSelector<PageViews> me) { return me.AddRange("pageViewsCount"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByStaffCountRange'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByStaffCountRange(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByStaffCountRange"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByFunction'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByFunction(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByFunction"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByIndustry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByIndustry(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByIndustry"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByAssociationType'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByAssociationType(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByAssociationType"); }
        
        /// <summary>
        /// Includes the field 'followerCountsBySeniority'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsBySeniority(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsBySeniority"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByRegion'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByRegion(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByRegion"); }
        
        /// <summary>
        /// Includes the field 'followerCountsByCountry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithFollowerCountsByCountry(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("followerCountsByCountry"); }
        
        /// <summary>
        /// Includes the field 'organizationalEntity'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithOrganizationalEntity(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.Add("organizationalEntity"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgFollowerStatisticsElement> WithAllFields(this FieldSelector<OrgFollowerStatisticsElement> me) { return me.AddRange("followerCountsByStaffCountRange", "followerCountsByFunction", "followerCountsByIndustry", "followerCountsByAssociationType", "followerCountsBySeniority", "followerCountsByRegion", "followerCountsByCountry", "organizationalEntity"); }
        
        /// <summary>
        /// Includes the field 'function'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByFunction> WithFunction(this FieldSelector<FollowerByFunction> me) { return me.Add("function"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByFunction> WithFollowerCounts(this FieldSelector<FollowerByFunction> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByFunction> WithAllFields(this FieldSelector<FollowerByFunction> me) { return me.AddRange("function", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'industry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByIndustry> WithIndustry(this FieldSelector<FollowerByIndustry> me) { return me.Add("industry"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByIndustry> WithFollowerCounts(this FieldSelector<FollowerByIndustry> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByIndustry> WithAllFields(this FieldSelector<FollowerByIndustry> me) { return me.AddRange("industry", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'seniority'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerBySeniority> WithSeniority(this FieldSelector<FollowerBySeniority> me) { return me.Add("seniority"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerBySeniority> WithFollowerCounts(this FieldSelector<FollowerBySeniority> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerBySeniority> WithAllFields(this FieldSelector<FollowerBySeniority> me) { return me.AddRange("seniority", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'staffCountRange'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByStaffCountRange> WithStaffCountRange(this FieldSelector<FollowerByStaffCountRange> me) { return me.Add("staffCountRange"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByStaffCountRange> WithFollowerCounts(this FieldSelector<FollowerByStaffCountRange> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByStaffCountRange> WithAllFields(this FieldSelector<FollowerByStaffCountRange> me) { return me.AddRange("staffCountRange", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'region'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByRegion> WithRegion(this FieldSelector<FollowerByRegion> me) { return me.Add("region"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByRegion> WithFollowerCounts(this FieldSelector<FollowerByRegion> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByRegion> WithAllFields(this FieldSelector<FollowerByRegion> me) { return me.AddRange("region", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'country'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByCountry> WithCountry(this FieldSelector<FollowerByCountry> me) { return me.Add("country"); }
        
        /// <summary>
        /// Includes the field 'followerCounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByCountry> WithFollowerCounts(this FieldSelector<FollowerByCountry> me) { return me.Add("followerCounts"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerByCountry> WithAllFields(this FieldSelector<FollowerByCountry> me) { return me.AddRange("country", "followerCounts"); }
        
        /// <summary>
        /// Includes the field 'organicFollowerCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerCounts> WithOrganicFollowerCount(this FieldSelector<FollowerCounts> me) { return me.Add("organicFollowerCount"); }
        
        /// <summary>
        /// Includes the field 'paidFollowerCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerCounts> WithPaidFollowerCount(this FieldSelector<FollowerCounts> me) { return me.Add("paidFollowerCount"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<FollowerCounts> WithAllFields(this FieldSelector<FollowerCounts> me) { return me.AddRange("organicFollowerCount", "paidFollowerCount"); }
        
    }
}

#endregion

#region ReturnTypes for Shares

// WriteReturnTypes(Shares, ShareStatistic)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ShareStatistic'
    /// </summary>
    [Serializable, XmlRoot("ShareStatistic")]
    public class ShareStatistic
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<ShareStatisticsElement> Elements { get; set; }

    }
}

// WriteReturnTypes(Shares, PostStatistic)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostStatistic'
    /// </summary>
    [Serializable, XmlRoot("PostStatistic")]
    public class PostStatistic
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<ShareStatisticsElement> Elements { get; set; }

    }
}

// WriteReturnTypes(Shares, ShareStatisticsElement)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ShareStatisticsElement'
    /// </summary>
    [Serializable, XmlRoot("ShareStatisticsElement")]
    public class ShareStatisticsElement
    {
        /// <summary>
        /// Field: 'totalShareStatistics' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "totalShareStatistics")]
        [JsonProperty(PropertyName = "totalShareStatistics")]
        public TotalShareStatistics TotalShareStatistics { get; set; }

        /// <summary>
        /// Field: 'share' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "share")]
        [JsonProperty(PropertyName = "share")]
        public string Share { get; set; }

        /// <summary>
        /// Field: 'organizationalEntity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organizationalEntity")]
        [JsonProperty(PropertyName = "organizationalEntity")]
        public string OrganizationalEntity { get; set; }

    }
}

// WriteReturnTypes(Shares, totalShareStatistics)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'totalShareStatistics'
    /// </summary>
    [Serializable, XmlRoot("totalShareStatistics")]
    public class TotalShareStatistics
    {
        /// <summary>
        /// Field: 'shareCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareCount")]
        [JsonProperty(PropertyName = "shareCount")]
        public int ShareCount { get; set; }

        /// <summary>
        /// Field: 'clickCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "clickCount")]
        [JsonProperty(PropertyName = "clickCount")]
        public int ClickCount { get; set; }

        /// <summary>
        /// Field: 'engagement' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "engagement")]
        [JsonProperty(PropertyName = "engagement")]
        public double Engagement { get; set; }

        /// <summary>
        /// Field: 'likeCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "likeCount")]
        [JsonProperty(PropertyName = "likeCount")]
        public int LikeCount { get; set; }

        /// <summary>
        /// Field: 'impressionCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "impressionCount")]
        [JsonProperty(PropertyName = "impressionCount")]
        public int ImpressionCount { get; set; }

        /// <summary>
        /// Field: 'commentCount' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "commentCount")]
        [JsonProperty(PropertyName = "commentCount")]
        public int CommentCount { get; set; }

    }
}

// WriteReturnTypes(Shares, PostShares)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShares'
    /// </summary>
    [Serializable, XmlRoot("PostShares")]
    public class PostShares
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<Common.PostShareResult> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypeFields(Shares)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'ShareStatistic', 'PostStatistic', 'ShareStatisticsElement', 'totalShareStatistics', 'PostShares' return types.
    /// </summary>
    public static class SharesFields {
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatistic> WithElements(this FieldSelector<ShareStatistic> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatistic> WithAllFields(this FieldSelector<ShareStatistic> me) { return me.AddRange("elements"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PostStatistic> WithElements(this FieldSelector<PostStatistic> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PostStatistic> WithAllFields(this FieldSelector<PostStatistic> me) { return me.AddRange("elements"); }
        
        /// <summary>
        /// Includes the field 'totalShareStatistics'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatisticsElement> WithTotalShareStatistics(this FieldSelector<ShareStatisticsElement> me) { return me.Add("totalShareStatistics"); }
        
        /// <summary>
        /// Includes the field 'share'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatisticsElement> WithShare(this FieldSelector<ShareStatisticsElement> me) { return me.Add("share"); }
        
        /// <summary>
        /// Includes the field 'organizationalEntity'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatisticsElement> WithOrganizationalEntity(this FieldSelector<ShareStatisticsElement> me) { return me.Add("organizationalEntity"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareStatisticsElement> WithAllFields(this FieldSelector<ShareStatisticsElement> me) { return me.AddRange("totalShareStatistics", "share", "organizationalEntity"); }
        
        /// <summary>
        /// Includes the field 'shareCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithShareCount(this FieldSelector<TotalShareStatistics> me) { return me.Add("shareCount"); }
        
        /// <summary>
        /// Includes the field 'clickCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithClickCount(this FieldSelector<TotalShareStatistics> me) { return me.Add("clickCount"); }
        
        /// <summary>
        /// Includes the field 'engagement'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithEngagement(this FieldSelector<TotalShareStatistics> me) { return me.Add("engagement"); }
        
        /// <summary>
        /// Includes the field 'likeCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithLikeCount(this FieldSelector<TotalShareStatistics> me) { return me.Add("likeCount"); }
        
        /// <summary>
        /// Includes the field 'impressionCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithImpressionCount(this FieldSelector<TotalShareStatistics> me) { return me.Add("impressionCount"); }
        
        /// <summary>
        /// Includes the field 'commentCount'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithCommentCount(this FieldSelector<TotalShareStatistics> me) { return me.Add("commentCount"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TotalShareStatistics> WithAllFields(this FieldSelector<TotalShareStatistics> me) { return me.AddRange("shareCount", "clickCount", "engagement", "likeCount", "impressionCount", "commentCount"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PostShares> WithElements(this FieldSelector<PostShares> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PostShares> WithPaging(this FieldSelector<PostShares> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PostShares> WithAllFields(this FieldSelector<PostShares> me) { return me.AddRange("elements", "paging"); }
        
    }
}

#endregion

#region ReturnTypes for Videos

// WriteReturnTypes(Videos, VideoAnalytics)
namespace Sparkle.LinkedInNET.Videos
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'VideoAnalytics'
    /// </summary>
    [Serializable, XmlRoot("VideoAnalytics")]
    public class VideoAnalytics
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<VideoAnalyticsElement> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Videos, VideoAnalyticsElement)
namespace Sparkle.LinkedInNET.Videos
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'VideoAnalyticsElement'
    /// </summary>
    [Serializable, XmlRoot("VideoAnalyticsElement")]
    public class VideoAnalyticsElement
    {
        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string Entity { get; set; }

        /// <summary>
        /// Field: 'statisticsType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "statisticsType")]
        [JsonProperty(PropertyName = "statisticsType")]
        public string StatisticsType { get; set; }

        /// <summary>
        /// Field: 'timeRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "timeRange")]
        [JsonProperty(PropertyName = "timeRange")]
        public TimeRange TimeRange { get; set; }

        /// <summary>
        /// Field: 'value' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "value")]
        [JsonProperty(PropertyName = "value")]
        public long Value { get; set; }

    }
}

// WriteReturnTypes(Videos, TimeRange)
namespace Sparkle.LinkedInNET.Videos
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TimeRange'
    /// </summary>
    [Serializable, XmlRoot("TimeRange")]
    public class TimeRange
    {
        /// <summary>
        /// Field: 'end' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end")]
        [JsonProperty(PropertyName = "end")]
        public long End { get; set; }

        /// <summary>
        /// Field: 'start' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start")]
        [JsonProperty(PropertyName = "start")]
        public long Start { get; set; }

    }
}

// WriteReturnTypeFields(Videos)
namespace Sparkle.LinkedInNET.Videos
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'VideoAnalytics', 'VideoAnalyticsElement', 'TimeRange' return types.
    /// </summary>
    public static class VideosFields {
    }
}

#endregion

#region ReturnTypes for Media

// WriteReturnTypes(Media, MediaPostResult)
namespace Sparkle.LinkedInNET.Media
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'MediaPostResult'
    /// </summary>
    [Serializable, XmlRoot("MediaPostResult")]
    public class MediaPostResult
    {
        /// <summary>
        /// Field: 'location' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "location")]
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

    }
}

// WriteReturnTypeFields(Media)
namespace Sparkle.LinkedInNET.Media
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'MediaPostResult' return types.
    /// </summary>
    public static class MediaFields {
    }
}

#endregion

#region ReturnTypes for UGCPost

// WriteReturnTypes(UGCPost, UGCVideo)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCVideo'
    /// </summary>
    [Serializable, XmlRoot("UGCVideo")]
    public class UGCVideo
    {
        /// <summary>
        /// Field: 'specificContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specificContent")]
        [JsonProperty(PropertyName = "specificContent")]
        public SpecificVideoContent SpecificContent { get; set; }

    }
}

// WriteReturnTypes(UGCPost, SpecificVideoContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'SpecificVideoContent'
    /// </summary>
    [Serializable, XmlRoot("SpecificVideoContent")]
    public class SpecificVideoContent
    {
        /// <summary>
        /// Field: 'com.linkedin.ugc.ShareContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.ugc.ShareContent")]
        [JsonProperty(PropertyName = "com.linkedin.ugc.ShareContent")]
        public ComLinkedinUgcVideoContent ComLinkedinUgcVideoContent { get; set; }

    }
}

// WriteReturnTypes(UGCPost, ComLinkedinUgcVideoContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ComLinkedinUgcVideoContent'
    /// </summary>
    [Serializable, XmlRoot("ComLinkedinUgcVideoContent")]
    public class ComLinkedinUgcVideoContent
    {
        /// <summary>
        /// Field: 'media' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media")]
        [JsonProperty(PropertyName = "media")]
        public List<UGCVideoMedia> UGCMedia { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCVideoMedia)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCVideoMedia'
    /// </summary>
    [Serializable, XmlRoot("UGCVideoMedia")]
    public class UGCVideoMedia
    {
        /// <summary>
        /// Field: 'media~' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media~")]
        [JsonProperty(PropertyName = "media~")]
        public UGCMediaData mediaData { get; set; }

        /// <summary>
        /// Field: 'media' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media")]
        [JsonProperty(PropertyName = "media")]
        public string Media { get; set; }

        /// <summary>
        /// Field: 'media!' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media!")]
        [JsonProperty(PropertyName = "media!")]
        public UGCMediaDataError mediaDataError { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMediaData)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMediaData'
    /// </summary>
    [Serializable, XmlRoot("UGCMediaData")]
    public class UGCMediaData
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<UGCMediaElements> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMediaDataError)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMediaDataError'
    /// </summary>
    [Serializable, XmlRoot("UGCMediaDataError")]
    public class UGCMediaDataError
    {
        /// <summary>
        /// Field: 'serviceErrorCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "serviceErrorCode")]
        [JsonProperty(PropertyName = "serviceErrorCode")]
        public string ServiceErrorCode { get; set; }

        /// <summary>
        /// Field: 'message' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "message")]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Field: 'status' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMediaElements)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMediaElements'
    /// </summary>
    [Serializable, XmlRoot("UGCMediaElements")]
    public class UGCMediaElements
    {
        /// <summary>
        /// Field: 'artifact' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "artifact")]
        [JsonProperty(PropertyName = "artifact")]
        public string Artifact { get; set; }

        /// <summary>
        /// Field: 'authorizationMethod' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authorizationMethod")]
        [JsonProperty(PropertyName = "authorizationMethod")]
        public string AuthorizationMethod { get; set; }

        /// <summary>
        /// Field: 'data' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "data")]
        [JsonProperty(PropertyName = "data")]
        public UGCMediaType Data { get; set; }

        /// <summary>
        /// Field: 'identifiers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifiers")]
        [JsonProperty(PropertyName = "identifiers")]
        public List<UGCMediaIdentifiers> Identifiers { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMediaType)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMediaType'
    /// </summary>
    [Serializable, XmlRoot("UGCMediaType")]
    public class UGCMediaType
    {
        /// <summary>
        /// Field: 'com.linkedin.digitalmedia.mediaartifact.Video' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.digitalmedia.mediaartifact.Video")]
        [JsonProperty(PropertyName = "com.linkedin.digitalmedia.mediaartifact.Video")]
        public object ComLinkedinUGCMediaType { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMediaIdentifiers)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMediaIdentifiers'
    /// </summary>
    [Serializable, XmlRoot("UGCMediaIdentifiers")]
    public class UGCMediaIdentifiers
    {
        /// <summary>
        /// Field: 'identifier' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifier")]
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Field: 'filename' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "filename")]
        [JsonProperty(PropertyName = "filename")]
        public string Filename { get; set; }

        /// <summary>
        /// Field: 'file' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "file")]
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Field: 'size' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "size")]
        [JsonProperty(PropertyName = "size")]
        public long Size { get; set; }

        /// <summary>
        /// Field: 'index' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "index")]
        [JsonProperty(PropertyName = "index")]
        public long Index { get; set; }

        /// <summary>
        /// Field: 'mediaType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaType")]
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Field: 'identifierExpiresInSeconds' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifierExpiresInSeconds")]
        [JsonProperty(PropertyName = "identifierExpiresInSeconds")]
        public long IdentifierExpiresInSeconds { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCPostItems)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCPostItems'
    /// </summary>
    [Serializable, XmlRoot("UGCPostItems")]
    public class UGCPostItems
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<UGCPostItemResult> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCPostItemResult)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCPostItemResult'
    /// </summary>
    [Serializable, XmlRoot("UGCPostItemResult")]
    public class UGCPostItemResult
    {
        /// <summary>
        /// Field: 'author' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "author")]
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// Field: 'clientApplication' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "clientApplication")]
        [JsonProperty(PropertyName = "clientApplication")]
        public string ClientApplication { get; set; }

        /// <summary>
        /// Field: 'containerEntity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "containerEntity")]
        [JsonProperty(PropertyName = "containerEntity")]
        public string ContainerEntity { get; set; }

        /// <summary>
        /// Field: 'contentCertificationRecord' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "contentCertificationRecord")]
        [JsonProperty(PropertyName = "contentCertificationRecord")]
        public string ContentCertificationRecord { get; set; }

        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public Common.ShareTime Created { get; set; }

        /// <summary>
        /// Field: 'deleted' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "deleted")]
        [JsonProperty(PropertyName = "deleted")]
        public Common.ShareTime Deleted { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public Common.ShareTime LastModified { get; set; }

        /// <summary>
        /// Field: 'firstPublishedAt' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstPublishedAt")]
        [JsonProperty(PropertyName = "firstPublishedAt")]
        public long FirstPublishedAt { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'lifecycleState' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lifecycleState")]
        [JsonProperty(PropertyName = "lifecycleState")]
        public string LifecycleState { get; set; }

        /// <summary>
        /// Field: 'origin' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "origin")]
        [JsonProperty(PropertyName = "origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Field: 'distribution' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distribution")]
        [JsonProperty(PropertyName = "distribution")]
        public Common.UGCDistribution Distribution { get; set; }

        /// <summary>
        /// Field: 'targetAudience' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "targetAudience")]
        [JsonProperty(PropertyName = "targetAudience")]
        public TargetAudience TargetAudience { get; set; }

        /// <summary>
        /// Field: 'visibility' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibility")]
        [JsonProperty(PropertyName = "visibility")]
        public UGCPostvisibility Visibility { get; set; }

        /// <summary>
        /// Field: 'responseContext' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "responseContext")]
        [JsonProperty(PropertyName = "responseContext")]
        public ResponseContext ResponseContext { get; set; }

        /// <summary>
        /// Field: 'specificContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specificContent")]
        [JsonProperty(PropertyName = "specificContent")]
        public UGCGetSpecificContent SpecificContent { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCPostData)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCPostData'
    /// </summary>
    [Serializable, XmlRoot("UGCPostData")]
    public class UGCPostData
    {
        /// <summary>
        /// Field: 'author' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "author")]
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// Field: 'lifecycleState' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lifecycleState")]
        [JsonProperty(PropertyName = "lifecycleState")]
        public string LifecycleState { get; set; }

        /// <summary>
        /// Field: 'specificContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specificContent")]
        [JsonProperty(PropertyName = "specificContent")]
        public SpecificContent SpecificContent { get; set; }

        /// <summary>
        /// Field: 'targetAudience' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "targetAudience")]
        [JsonProperty(PropertyName = "targetAudience")]
        public TargetAudience TargetAudience { get; set; }

        /// <summary>
        /// Field: 'visibility' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibility")]
        [JsonProperty(PropertyName = "visibility")]
        public UGCPostvisibility Visibility { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCPostResult)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCPostResult'
    /// </summary>
    [Serializable, XmlRoot("UGCPostResult")]
    public class UGCPostResult
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

    }
}

// WriteReturnTypes(UGCPost, responseContext)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'responseContext'
    /// </summary>
    [Serializable, XmlRoot("responseContext")]
    public class ResponseContext
    {
        /// <summary>
        /// Field: 'parent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "parent")]
        [JsonProperty(PropertyName = "parent")]
        public string Parent { get; set; }

        /// <summary>
        /// Field: 'root' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "root")]
        [JsonProperty(PropertyName = "root")]
        public string Root { get; set; }

    }
}

// WriteReturnTypes(UGCPost, SpecificContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'SpecificContent'
    /// </summary>
    [Serializable, XmlRoot("SpecificContent")]
    public class SpecificContent
    {
        /// <summary>
        /// Field: 'com.linkedin.ugc.ShareContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.ugc.ShareContent")]
        [JsonProperty(PropertyName = "com.linkedin.ugc.ShareContent")]
        public ComLinkedinUgcShareContent ComLinkedinUgcShareContent { get; set; }

    }
}

// WriteReturnTypes(UGCPost, comLinkedinUgcShareContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'comLinkedinUgcShareContent'
    /// </summary>
    [Serializable, XmlRoot("comLinkedinUgcShareContent")]
    public class ComLinkedinUgcShareContent
    {
        /// <summary>
        /// Field: 'media' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media")]
        [JsonProperty(PropertyName = "media")]
        public List<UGCMedia> UGCMedia { get; set; }

        /// <summary>
        /// Field: 'shareCommentary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareCommentary")]
        [JsonProperty(PropertyName = "shareCommentary")]
        public UGCText ShareCommentary { get; set; }

        /// <summary>
        /// Field: 'shareMediaCategory' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareMediaCategory")]
        [JsonProperty(PropertyName = "shareMediaCategory")]
        public string ShareMediaCategory { get; set; }

    }
}

// WriteReturnTypes(UGCPost, SpecificContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'SpecificContent'
    /// </summary>
    [Serializable, XmlRoot("SpecificContent")]
    public class UGCGetSpecificContent
    {
        /// <summary>
        /// Field: 'com.linkedin.ugc.ShareContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.ugc.ShareContent")]
        [JsonProperty(PropertyName = "com.linkedin.ugc.ShareContent")]
        public ComLinkedinUgcGetShareContent ComLinkedinUgcGetShareContent { get; set; }

    }
}

// WriteReturnTypes(UGCPost, ComLinkedinUgcGetShareContent)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ComLinkedinUgcGetShareContent'
    /// </summary>
    [Serializable, XmlRoot("ComLinkedinUgcGetShareContent")]
    public class ComLinkedinUgcGetShareContent
    {
        /// <summary>
        /// Field: 'media' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media")]
        [JsonProperty(PropertyName = "media")]
        public List<UGCMedia> UGCMedia { get; set; }

        /// <summary>
        /// Field: 'shareCommentary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareCommentary")]
        [JsonProperty(PropertyName = "shareCommentary")]
        public UGCGetText ShareCommentary { get; set; }

        /// <summary>
        /// Field: 'shareMediaCategory' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareMediaCategory")]
        [JsonProperty(PropertyName = "shareMediaCategory")]
        public string ShareMediaCategory { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCMedia)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCMedia'
    /// </summary>
    [Serializable, XmlRoot("UGCMedia")]
    public class UGCMedia
    {
        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        [JsonProperty(PropertyName = "description")]
        public UGCText UGCMediaDescription { get; set; }

        /// <summary>
        /// Field: 'media' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "media")]
        [JsonProperty(PropertyName = "media")]
        public string Media { get; set; }

        /// <summary>
        /// Field: 'status' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Field: 'originalUrl' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "originalUrl")]
        [JsonProperty(PropertyName = "originalUrl")]
        public string OriginalUrl { get; set; }

        /// <summary>
        /// Field: 'thumbnails' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "thumbnails")]
        [JsonProperty(PropertyName = "thumbnails")]
        public List<ImageThumbnail> Thumbnails { get; set; }

        /// <summary>
        /// Field: 'landingPage' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "landingPage")]
        [JsonProperty(PropertyName = "landingPage")]
        public LandingPage LandingPages { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public UGCText UGCMediaTitle { get; set; }

    }
}

// WriteReturnTypes(UGCPost, ImageThumbnail)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ImageThumbnail'
    /// </summary>
    [Serializable, XmlRoot("ImageThumbnail")]
    public class ImageThumbnail
    {
        /// <summary>
        /// Field: 'altText' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "altText")]
        [JsonProperty(PropertyName = "altText")]
        public string AltText { get; set; }

        /// <summary>
        /// Field: 'height' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "height")]
        [JsonProperty(PropertyName = "height")]
        public int Height { get; set; }

        /// <summary>
        /// Field: 'size' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "size")]
        [JsonProperty(PropertyName = "size")]
        public long Size { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'width' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "width")]
        [JsonProperty(PropertyName = "width")]
        public int Width { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCText)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCText'
    /// </summary>
    [Serializable, XmlRoot("UGCText")]
    public class UGCText
    {
        /// <summary>
        /// Field: 'attributes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "attributes")]
        [JsonProperty(PropertyName = "attributes")]
        public List<UGCAnnotations> Attributes { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCText)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCText'
    /// </summary>
    [Serializable, XmlRoot("UGCText")]
    public class UGCGetText
    {
        /// <summary>
        /// Field: 'attributes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "attributes")]
        [JsonProperty(PropertyName = "attributes")]
        public List<UGCAnnotations> Attributes { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCAnnotations)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCAnnotations'
    /// </summary>
    [Serializable, XmlRoot("UGCAnnotations")]
    public class UGCAnnotations
    {
        /// <summary>
        /// Field: 'value' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "value")]
        [JsonProperty(PropertyName = "value")]
        public valueAnnotation Value { get; set; }

        /// <summary>
        /// Field: 'length' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "length")]
        [JsonProperty(PropertyName = "length")]
        public int Length { get; set; }

        /// <summary>
        /// Field: 'start' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start")]
        [JsonProperty(PropertyName = "start")]
        public int Start { get; set; }

    }
}

// WriteReturnTypes(UGCPost, valueAnnotation)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'valueAnnotation'
    /// </summary>
    [Serializable, XmlRoot("valueAnnotation")]
    public class valueAnnotation
    {
        /// <summary>
        /// Field: 'com.linkedin.common.CompanyAttributedEntity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.common.CompanyAttributedEntity")]
        [JsonProperty(PropertyName = "com.linkedin.common.CompanyAttributedEntity")]
        public CompanyAttributedEntity CompanyAttributedEntity { get; set; }

        /// <summary>
        /// Field: 'com.linkedin.common.MemberAttributedEntity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.common.MemberAttributedEntity")]
        [JsonProperty(PropertyName = "com.linkedin.common.MemberAttributedEntity")]
        public MemberAttributedEntity MemberAttributedEntity { get; set; }

    }
}

// WriteReturnTypes(UGCPost, CompanyAttributedEntity)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CompanyAttributedEntity'
    /// </summary>
    [Serializable, XmlRoot("CompanyAttributedEntity")]
    public class CompanyAttributedEntity
    {
        /// <summary>
        /// Field: 'company' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "company")]
        [JsonProperty(PropertyName = "company")]
        public string Company { get; set; }

    }
}

// WriteReturnTypes(UGCPost, MemberAttributedEntity)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'MemberAttributedEntity'
    /// </summary>
    [Serializable, XmlRoot("MemberAttributedEntity")]
    public class MemberAttributedEntity
    {
        /// <summary>
        /// Field: 'member' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member")]
        [JsonProperty(PropertyName = "member")]
        public string Member { get; set; }

    }
}

// WriteReturnTypes(UGCPost, LandingPage)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'LandingPage'
    /// </summary>
    [Serializable, XmlRoot("LandingPage")]
    public class LandingPage
    {
        /// <summary>
        /// Field: 'landingPageTitle' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "landingPageTitle")]
        [JsonProperty(PropertyName = "landingPageTitle")]
        public string LandingPageTitle { get; set; }

        /// <summary>
        /// Field: 'landingPageUrl' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "landingPageUrl")]
        [JsonProperty(PropertyName = "landingPageUrl")]
        public string LandingPageUrl { get; set; }

    }
}

// WriteReturnTypes(UGCPost, TargetAudience)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetAudience'
    /// </summary>
    [Serializable, XmlRoot("TargetAudience")]
    public class TargetAudience
    {
        /// <summary>
        /// Field: 'targetedEntities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "targetedEntities")]
        [JsonProperty(PropertyName = "targetedEntities")]
        public List<Common.LinkedInTargetedEntity> TargetedEntities { get; set; }

    }
}

// WriteReturnTypes(UGCPost, UGCPostvisibility)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCPostvisibility'
    /// </summary>
    [Serializable, XmlRoot("UGCPostvisibility")]
    public class UGCPostvisibility
    {
        /// <summary>
        /// Field: 'com.linkedin.ugc.MemberNetworkVisibility' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.ugc.MemberNetworkVisibility")]
        [JsonProperty(PropertyName = "com.linkedin.ugc.MemberNetworkVisibility")]
        public string comLinkedinUgcMemberNetworkVisibility { get; set; }

    }
}

// WriteReturnTypeFields(UGCPost)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'UGCVideo', 'SpecificVideoContent', 'ComLinkedinUgcVideoContent', 'UGCVideoMedia', 'UGCMediaData', 'UGCMediaDataError', 'UGCMediaElements', 'UGCMediaType', 'UGCMediaIdentifiers', 'UGCPostItems', 'UGCPostItemResult', 'UGCPostData', 'UGCPostResult', 'responseContext', 'SpecificContent', 'comLinkedinUgcShareContent', 'SpecificContent', 'ComLinkedinUgcGetShareContent', 'UGCMedia', 'ImageThumbnail', 'UGCText', 'UGCText', 'UGCAnnotations', 'valueAnnotation', 'CompanyAttributedEntity', 'MemberAttributedEntity', 'LandingPage', 'TargetAudience', 'UGCPostvisibility' return types.
    /// </summary>
    public static class UGCPostFields {
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UGCPostItems> WithElements(this FieldSelector<UGCPostItems> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UGCPostItems> WithPaging(this FieldSelector<UGCPostItems> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UGCPostItems> WithAllFields(this FieldSelector<UGCPostItems> me) { return me.AddRange("elements", "paging"); }
        
    }
}

#endregion

#region ReturnTypes for SocialActions

// WriteReturnTypes(SocialActions, Comments)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Comments'
    /// </summary>
    [Serializable, XmlRoot("Comments")]
    public class Comments
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<CommentResult> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CommentResult)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CommentResult'
    /// </summary>
    [Serializable, XmlRoot("CommentResult")]
    public class CommentResult
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'commentsSummary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "commentsSummary")]
        [JsonProperty(PropertyName = "commentsSummary")]
        public CommentsSummary CommentsSummary { get; set; }

        /// <summary>
        /// Field: 'parentComment' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "parentComment")]
        [JsonProperty(PropertyName = "parentComment")]
        public string ParentComment { get; set; }

        /// <summary>
        /// Field: 'agent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "agent")]
        [JsonProperty(PropertyName = "agent")]
        public string Agent { get; set; }

        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public Common.ShareTime Created { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public Common.ShareTime LastModified { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'message' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "message")]
        [JsonProperty(PropertyName = "message")]
        public CommentMessage Message { get; set; }

        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public List<CommentContent> Content { get; set; }

        /// <summary>
        /// Field: 'object' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "object")]
        [JsonProperty(PropertyName = "object")]
        public string Object { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CommentsSummary)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CommentsSummary'
    /// </summary>
    [Serializable, XmlRoot("CommentsSummary")]
    public class CommentsSummary
    {
        /// <summary>
        /// Field: 'totalFirstLevelComments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "totalFirstLevelComments")]
        [JsonProperty(PropertyName = "totalFirstLevelComments")]
        public int TotalFirstLevelComments { get; set; }

        /// <summary>
        /// Field: 'aggregatedTotalComments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "aggregatedTotalComments")]
        [JsonProperty(PropertyName = "aggregatedTotalComments")]
        public int AggregatedTotalComments { get; set; }

        /// <summary>
        /// Field: 'selectedComments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "selectedComments")]
        [JsonProperty(PropertyName = "selectedComments")]
        public List<string> SelectedComments { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CommentMessage)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CommentMessage'
    /// </summary>
    [Serializable, XmlRoot("CommentMessage")]
    public class CommentMessage
    {
        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Field: 'attributes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "attributes")]
        [JsonProperty(PropertyName = "attributes")]
        public List<dynamic> Attributes { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CommentContent)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CommentContent'
    /// </summary>
    [Serializable, XmlRoot("CommentContent")]
    public class CommentContent
    {
        /// <summary>
        /// Field: 'type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "type")]
        [JsonProperty(PropertyName = "type")]
        public string ContentType { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CreateCommentRequest)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CreateCommentRequest'
    /// </summary>
    [Serializable, XmlRoot("CreateCommentRequest")]
    public class CreateCommentRequest
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'message' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "message")]
        [JsonProperty(PropertyName = "message")]
        public CommentMessage Message { get; set; }

        /// <summary>
        /// Field: 'parentComment' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "parentComment")]
        [JsonProperty(PropertyName = "parentComment")]
        public string ParentComment { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CreateFirstLevelCommentRequest)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CreateFirstLevelCommentRequest'
    /// </summary>
    [Serializable, XmlRoot("CreateFirstLevelCommentRequest")]
    public class CreateFirstLevelCommentRequest
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'message' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "message")]
        [JsonProperty(PropertyName = "message")]
        public CommentMessage Message { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CreateLikeRequest)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CreateLikeRequest'
    /// </summary>
    [Serializable, XmlRoot("CreateLikeRequest")]
    public class CreateLikeRequest
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'object' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "object")]
        [JsonProperty(PropertyName = "object")]
        public string Object { get; set; }

    }
}

// WriteReturnTypes(SocialActions, CreateLikeResult)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CreateLikeResult'
    /// </summary>
    [Serializable, XmlRoot("CreateLikeResult")]
    public class CreateLikeResult
    {
        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'agent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "agent")]
        [JsonProperty(PropertyName = "agent")]
        public string Agent { get; set; }

        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public Common.ShareTime Created { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public Common.ShareTime LastModified { get; set; }

        /// <summary>
        /// Field: 'object' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "object")]
        [JsonProperty(PropertyName = "object")]
        public string Object { get; set; }

    }
}

// WriteReturnTypeFields(SocialActions)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'Comments', 'CommentResult', 'CommentsSummary', 'CommentMessage', 'CommentContent', 'CreateCommentRequest', 'CreateFirstLevelCommentRequest', 'CreateLikeRequest', 'CreateLikeResult' return types.
    /// </summary>
    public static class SocialActionsFields {
    }
}

#endregion

#region ReturnTypes for Asset

// WriteReturnTypes(Asset, RegisterUploadRequest)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'RegisterUploadRequest'
    /// </summary>
    [Serializable, XmlRoot("RegisterUploadRequest")]
    public class RegisterUploadRequest
    {
        /// <summary>
        /// Field: 'registerUploadRequest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "registerUploadRequest")]
        [JsonProperty(PropertyName = "registerUploadRequest")]
        public RegisterUploadRequestData RegisterUploadRequestData { get; set; }

    }
}

// WriteReturnTypes(Asset, RegisterUploadRequestData)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'RegisterUploadRequestData'
    /// </summary>
    [Serializable, XmlRoot("RegisterUploadRequestData")]
    public class RegisterUploadRequestData
    {
        /// <summary>
        /// Field: 'supportedUploadMechanism' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "supportedUploadMechanism")]
        [JsonProperty(PropertyName = "supportedUploadMechanism")]
        public List<string> SupportedUploadMechanism { get; set; }

        /// <summary>
        /// Field: 'fileSize' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "fileSize")]
        [JsonProperty(PropertyName = "fileSize")]
        public long? FileSize { get; set; }

        /// <summary>
        /// Field: 'owner' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "owner")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Field: 'recipes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recipes")]
        [JsonProperty(PropertyName = "recipes")]
        public List<string> Recipes { get; set; }

        /// <summary>
        /// Field: 'serviceRelationships' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "serviceRelationships")]
        [JsonProperty(PropertyName = "serviceRelationships")]
        public List<ServiceRelationship> ServiceRelationships { get; set; }

    }
}

// WriteReturnTypes(Asset, ServiceRelationship)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ServiceRelationship'
    /// </summary>
    [Serializable, XmlRoot("ServiceRelationship")]
    public class ServiceRelationship
    {
        /// <summary>
        /// Field: 'identifier' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifier")]
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Field: 'relationshipType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "relationshipType")]
        [JsonProperty(PropertyName = "relationshipType")]
        public string RelationshipType { get; set; }

    }
}

// WriteReturnTypes(Asset, RegisterUploadResult)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'RegisterUploadResult'
    /// </summary>
    [Serializable, XmlRoot("RegisterUploadResult")]
    public class RegisterUploadResult
    {
        /// <summary>
        /// Field: 'value' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "value")]
        [JsonProperty(PropertyName = "value")]
        public RegisterUploadResultValue Value { get; set; }

    }
}

// WriteReturnTypes(Asset, RegisterUploadResultValue)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'RegisterUploadResultValue'
    /// </summary>
    [Serializable, XmlRoot("RegisterUploadResultValue")]
    public class RegisterUploadResultValue
    {
        /// <summary>
        /// Field: 'asset' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "asset")]
        [JsonProperty(PropertyName = "asset")]
        public string Asset { get; set; }

        /// <summary>
        /// Field: 'mediaArtifact' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaArtifact")]
        [JsonProperty(PropertyName = "mediaArtifact")]
        public string MediaArtifact { get; set; }

        /// <summary>
        /// Field: 'uploadMechanism' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "uploadMechanism")]
        [JsonProperty(PropertyName = "uploadMechanism")]
        public UploadMechanism UploadMechanism { get; set; }

    }
}

// WriteReturnTypes(Asset, UploadMechanism)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UploadMechanism'
    /// </summary>
    [Serializable, XmlRoot("UploadMechanism")]
    public class UploadMechanism
    {
        /// <summary>
        /// Field: 'com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest")]
        [JsonProperty(PropertyName = "com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest")]
        public ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest { get; set; }

        /// <summary>
        /// Field: 'com.linkedin.digitalmedia.uploading.MultipartUpload' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "com.linkedin.digitalmedia.uploading.MultipartUpload")]
        [JsonProperty(PropertyName = "com.linkedin.digitalmedia.uploading.MultipartUpload")]
        public ComLinkedinDigitalmediaUploadingMultipartUpload ComLinkedinDigitalmediaUploadingMultipartUpload { get; set; }

    }
}

// WriteReturnTypes(Asset, ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest'
    /// </summary>
    [Serializable, XmlRoot("ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest")]
    public class ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest
    {
        /// <summary>
        /// Field: 'headers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headers")]
        [JsonProperty(PropertyName = "headers")]
        public Headers Headers { get; set; }

        /// <summary>
        /// Field: 'uploadUrl' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "uploadUrl")]
        [JsonProperty(PropertyName = "uploadUrl")]
        public string UploadUrl { get; set; }

    }
}

// WriteReturnTypes(Asset, ComLinkedinDigitalmediaUploadingMultipartUpload)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ComLinkedinDigitalmediaUploadingMultipartUpload'
    /// </summary>
    [Serializable, XmlRoot("ComLinkedinDigitalmediaUploadingMultipartUpload")]
    public class ComLinkedinDigitalmediaUploadingMultipartUpload
    {
        /// <summary>
        /// Field: 'metadata' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "metadata")]
        [JsonProperty(PropertyName = "metadata")]
        public string Metadata { get; set; }

        /// <summary>
        /// Field: 'partUploadRequests' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "partUploadRequests")]
        [JsonProperty(PropertyName = "partUploadRequests")]
        public List<PartUploadRequest> PartUploadRequests { get; set; }

    }
}

// WriteReturnTypes(Asset, PartUploadRequest)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PartUploadRequest'
    /// </summary>
    [Serializable, XmlRoot("PartUploadRequest")]
    public class PartUploadRequest
    {
        /// <summary>
        /// Field: 'headers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headers")]
        [JsonProperty(PropertyName = "headers")]
        public Headers Headers { get; set; }

        /// <summary>
        /// Field: 'urlExpiresAt' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "urlExpiresAt")]
        [JsonProperty(PropertyName = "urlExpiresAt")]
        public long UrlExpiresAt { get; set; }

        /// <summary>
        /// Field: 'byteRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "byteRange")]
        [JsonProperty(PropertyName = "byteRange")]
        public ByteRange ByteRange { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

    }
}

// WriteReturnTypes(Asset, Headers)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Headers'
    /// </summary>
    [Serializable, XmlRoot("Headers")]
    public class Headers
    {
        /// <summary>
        /// Field: 'Content-Type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "Content-Type")]
        [JsonProperty(PropertyName = "Content-Type")]
        public string ContentType { get; set; }

        /// <summary>
        /// Field: 'Content-Length' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "Content-Length")]
        [JsonProperty(PropertyName = "Content-Length")]
        public string ContentLength { get; set; }

        /// <summary>
        /// Field: 'x-amz-server-side-encryption' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "x-amz-server-side-encryption")]
        [JsonProperty(PropertyName = "x-amz-server-side-encryption")]
        public string xAmzServerSideEncryption { get; set; }

        /// <summary>
        /// Field: 'x-amz-server-side-encryption-aws-kms-key-id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "x-amz-server-side-encryption-aws-kms-key-id")]
        [JsonProperty(PropertyName = "x-amz-server-side-encryption-aws-kms-key-id")]
        public string xAmzServerSideEncryptionAwsKmsKeyId { get; set; }

    }
}

// WriteReturnTypes(Asset, ByteRange)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ByteRange'
    /// </summary>
    [Serializable, XmlRoot("ByteRange")]
    public class ByteRange
    {
        /// <summary>
        /// Field: 'lastByte' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastByte")]
        [JsonProperty(PropertyName = "lastByte")]
        public long LastByte { get; set; }

        /// <summary>
        /// Field: 'firstByte' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstByte")]
        [JsonProperty(PropertyName = "firstByte")]
        public long FirstByte { get; set; }

    }
}

// WriteReturnTypes(Asset, CompleteMultipartUploadRequest)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CompleteMultipartUploadRequest'
    /// </summary>
    [Serializable, XmlRoot("CompleteMultipartUploadRequest")]
    public class CompleteMultipartUploadRequest
    {
        /// <summary>
        /// Field: 'completeMultipartUploadRequest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "completeMultipartUploadRequest")]
        [JsonProperty(PropertyName = "completeMultipartUploadRequest")]
        public CompleteMultipartUploadRequestData CompleteMultipartUploadRequestData { get; set; }

    }
}

// WriteReturnTypes(Asset, CompleteMultipartUploadRequestData)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CompleteMultipartUploadRequestData'
    /// </summary>
    [Serializable, XmlRoot("CompleteMultipartUploadRequestData")]
    public class CompleteMultipartUploadRequestData
    {
        /// <summary>
        /// Field: 'mediaArtifact' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaArtifact")]
        [JsonProperty(PropertyName = "mediaArtifact")]
        public string MediaArtifact { get; set; }

        /// <summary>
        /// Field: 'metadata' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "metadata")]
        [JsonProperty(PropertyName = "metadata")]
        public string Metadata { get; set; }

        /// <summary>
        /// Field: 'partUploadResponses' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "partUploadResponses")]
        [JsonProperty(PropertyName = "partUploadResponses")]
        public List<PartUploadResponse> PartUploadResponses { get; set; }

    }
}

// WriteReturnTypes(Asset, PartUploadResponse)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PartUploadResponse'
    /// </summary>
    [Serializable, XmlRoot("PartUploadResponse")]
    public class PartUploadResponse
    {
        /// <summary>
        /// Field: 'headers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headers")]
        [JsonProperty(PropertyName = "headers")]
        public PartUploadResponseHeaders Headers { get; set; }

        /// <summary>
        /// Field: 'httpStatusCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "httpStatusCode")]
        [JsonProperty(PropertyName = "httpStatusCode")]
        public int HttpStatusCode { get; set; }

    }
}

// WriteReturnTypes(Asset, PartUploadResponseHeaders)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PartUploadResponseHeaders'
    /// </summary>
    [Serializable, XmlRoot("PartUploadResponseHeaders")]
    public class PartUploadResponseHeaders
    {
        /// <summary>
        /// Field: 'ETag' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "ETag")]
        [JsonProperty(PropertyName = "ETag")]
        public string ETag { get; set; }

    }
}

// WriteReturnTypes(Asset, CompleteMultipartUploadResult)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CompleteMultipartUploadResult'
    /// </summary>
    [Serializable, XmlRoot("CompleteMultipartUploadResult")]
    public class CompleteMultipartUploadResult
    {
        /// <summary>
        /// Field: 'data' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "data")]
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

    }
}

// WriteReturnTypes(Asset, UploadAssetRequest)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UploadAssetRequest'
    /// </summary>
    [Serializable, XmlRoot("UploadAssetRequest")]
    public class UploadAssetRequest
    {
        /// <summary>
        /// Field: 'requestHeaders' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "requestHeaders")]
        [JsonProperty(PropertyName = "requestHeaders")]
        public ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest RequestHeaders { get; set; }

        /// <summary>
        /// Field: 'data' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "data")]
        [JsonProperty(PropertyName = "data")]
        public byte[] Data { get; set; }

    }
}

// WriteReturnTypes(Asset, UploadAssetResult)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UploadAssetResult'
    /// </summary>
    [Serializable, XmlRoot("UploadAssetResult")]
    public class UploadAssetResponse
    {
        /// <summary>
        /// Field: 'data' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "data")]
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

    }
}

// WriteReturnTypes(Asset, AssetResult)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'AssetResult'
    /// </summary>
    [Serializable, XmlRoot("AssetResult")]
    public class AssetResult
    {
        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public long Created { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public long LastModified { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'mediaTypeFamily' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaTypeFamily")]
        [JsonProperty(PropertyName = "mediaTypeFamily")]
        public string MediaTypeFamily { get; set; }

        /// <summary>
        /// Field: 'recipes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recipes")]
        [JsonProperty(PropertyName = "recipes")]
        public List<Recipe> Recipes { get; set; }

        /// <summary>
        /// Field: 'serviceRelationships' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "serviceRelationships")]
        [JsonProperty(PropertyName = "serviceRelationships")]
        public List<ServiceRelationship> ServiceRelationship { get; set; }

        /// <summary>
        /// Field: 'status' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}

// WriteReturnTypes(Asset, Recipe)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Recipe'
    /// </summary>
    [Serializable, XmlRoot("Recipe")]
    public class Recipe
    {
        /// <summary>
        /// Field: 'recipe' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recipe")]
        [JsonProperty(PropertyName = "recipe")]
        public string RecipeURN { get; set; }

        /// <summary>
        /// Field: 'status' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}

// WriteReturnTypeFields(Asset)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'RegisterUploadRequest', 'RegisterUploadRequestData', 'ServiceRelationship', 'RegisterUploadResult', 'RegisterUploadResultValue', 'UploadMechanism', 'ComLinkedinDigitalmediaUploadingMediaUploadHttpRequest', 'ComLinkedinDigitalmediaUploadingMultipartUpload', 'PartUploadRequest', 'Headers', 'ByteRange', 'CompleteMultipartUploadRequest', 'CompleteMultipartUploadRequestData', 'PartUploadResponse', 'PartUploadResponseHeaders', 'CompleteMultipartUploadResult', 'UploadAssetRequest', 'UploadAssetResult', 'AssetResult', 'Recipe' return types.
    /// </summary>
    public static class AssetFields {
    }
}

#endregion

#region ReturnTypes for Targeting

// WriteReturnTypes(Targeting, TargetingFacets)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingFacets'
    /// </summary>
    [Serializable, XmlRoot("TargetingFacets")]
    public class TargetingFacets
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<dynamic> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, AudienceCounts)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'AudienceCounts'
    /// </summary>
    [Serializable, XmlRoot("AudienceCounts")]
    public class AudienceCounts
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<AudienceCountElements> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, AudienceCountElements)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'AudienceCountElements'
    /// </summary>
    [Serializable, XmlRoot("AudienceCountElements")]
    public class AudienceCountElements
    {
        /// <summary>
        /// Field: 'active' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "active")]
        [JsonProperty(PropertyName = "active")]
        public int Active { get; set; }

        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "total")]
        [JsonProperty(PropertyName = "total")]
        public int Total { get; set; }

    }
}

// WriteReturnTypes(Targeting, Industries)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Industries'
    /// </summary>
    [Serializable, XmlRoot("Industries")]
    public class Industries
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingBase> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, JobFunctions)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'JobFunctions'
    /// </summary>
    [Serializable, XmlRoot("JobFunctions")]
    public class JobFunctions
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingBase> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, CountryGroups)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'CountryGroups'
    /// </summary>
    [Serializable, XmlRoot("CountryGroups")]
    public class CountryGroups
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingCountryGroup> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, Countries)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Countries'
    /// </summary>
    [Serializable, XmlRoot("Countries")]
    public class Countries
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingCountry> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, GeoLocations)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'GeoLocations'
    /// </summary>
    [Serializable, XmlRoot("GeoLocations")]
    public class GeoLocations
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingGeoLocation> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, States)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'States'
    /// </summary>
    [Serializable, XmlRoot("States")]
    public class States
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingState> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, Regions)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Regions'
    /// </summary>
    [Serializable, XmlRoot("Regions")]
    public class Regions
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingRegion> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, Seniorities)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Seniorities'
    /// </summary>
    [Serializable, XmlRoot("Seniorities")]
    public class Seniorities
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<TargetingBase> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingBase)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingBase'
    /// </summary>
    [Serializable, XmlRoot("TargetingBase")]
    public class TargetingBase
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.MultiLocaleString Name { get; set; }

        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingGeoLocation)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingGeoLocation'
    /// </summary>
    [Serializable, XmlRoot("TargetingGeoLocation")]
    public class TargetingGeoLocation
    {
        /// <summary>
        /// Field: 'displayText' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "displayText")]
        [JsonProperty(PropertyName = "displayText")]
        public string DisplayText { get; set; }

        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string Entity { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingCountryGroup)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingCountryGroup'
    /// </summary>
    [Serializable, XmlRoot("TargetingCountryGroup")]
    public class TargetingCountryGroup
    {
        /// <summary>
        /// Field: 'countryGroupCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "countryGroupCode")]
        [JsonProperty(PropertyName = "countryGroupCode")]
        public string CountryGroupCode { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.LocaleString Name { get; set; }

        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingCountry)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingCountry'
    /// </summary>
    [Serializable, XmlRoot("TargetingCountry")]
    public class TargetingCountry
    {
        /// <summary>
        /// Field: 'countryGroup' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "countryGroup")]
        [JsonProperty(PropertyName = "countryGroup")]
        public string CountryGroup { get; set; }

        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string Entity { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingState)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingState'
    /// </summary>
    [Serializable, XmlRoot("TargetingState")]
    public class TargetingState
    {
        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Field: 'stateCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "stateCode")]
        [JsonProperty(PropertyName = "stateCode")]
        public string StateCode { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.LocaleString Name { get; set; }

        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

    }
}

// WriteReturnTypes(Targeting, TargetingRegion)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'TargetingRegion'
    /// </summary>
    [Serializable, XmlRoot("TargetingRegion")]
    public class TargetingRegion
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.LocaleString Name { get; set; }

        /// <summary>
        /// Field: '$URN' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "$URN")]
        [JsonProperty(PropertyName = "$URN")]
        public string Urn { get; set; }

        /// <summary>
        /// Field: 'states' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "states")]
        [JsonProperty(PropertyName = "states")]
        public List<string> States { get; set; }

    }
}

// WriteReturnTypeFields(Targeting)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'TargetingFacets', 'AudienceCounts', 'AudienceCountElements', 'Industries', 'JobFunctions', 'CountryGroups', 'Countries', 'GeoLocations', 'States', 'Regions', 'Seniorities', 'TargetingBase', 'TargetingGeoLocation', 'TargetingCountryGroup', 'TargetingCountry', 'TargetingState', 'TargetingRegion' return types.
    /// </summary>
    public static class TargetingFields {
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TargetingFacets> WithElements(this FieldSelector<TargetingFacets> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TargetingFacets> WithPaging(this FieldSelector<TargetingFacets> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<TargetingFacets> WithAllFields(this FieldSelector<TargetingFacets> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCounts> WithElements(this FieldSelector<AudienceCounts> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCounts> WithPaging(this FieldSelector<AudienceCounts> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCounts> WithAllFields(this FieldSelector<AudienceCounts> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'active'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCountElements> WithActive(this FieldSelector<AudienceCountElements> me) { return me.Add("active"); }
        
        /// <summary>
        /// Includes the field 'total'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCountElements> WithTotal(this FieldSelector<AudienceCountElements> me) { return me.Add("total"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AudienceCountElements> WithAllFields(this FieldSelector<AudienceCountElements> me) { return me.AddRange("active", "total"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Industries> WithElements(this FieldSelector<Industries> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Industries> WithPaging(this FieldSelector<Industries> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Industries> WithAllFields(this FieldSelector<Industries> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<JobFunctions> WithElements(this FieldSelector<JobFunctions> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<JobFunctions> WithPaging(this FieldSelector<JobFunctions> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<JobFunctions> WithAllFields(this FieldSelector<JobFunctions> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CountryGroups> WithElements(this FieldSelector<CountryGroups> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CountryGroups> WithPaging(this FieldSelector<CountryGroups> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CountryGroups> WithAllFields(this FieldSelector<CountryGroups> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Countries> WithElements(this FieldSelector<Countries> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Countries> WithPaging(this FieldSelector<Countries> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Countries> WithAllFields(this FieldSelector<Countries> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<GeoLocations> WithElements(this FieldSelector<GeoLocations> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<GeoLocations> WithPaging(this FieldSelector<GeoLocations> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<GeoLocations> WithAllFields(this FieldSelector<GeoLocations> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<States> WithElements(this FieldSelector<States> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<States> WithPaging(this FieldSelector<States> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<States> WithAllFields(this FieldSelector<States> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Regions> WithElements(this FieldSelector<Regions> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Regions> WithPaging(this FieldSelector<Regions> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Regions> WithAllFields(this FieldSelector<Regions> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Seniorities> WithElements(this FieldSelector<Seniorities> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Seniorities> WithPaging(this FieldSelector<Seniorities> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Seniorities> WithAllFields(this FieldSelector<Seniorities> me) { return me.AddRange("elements", "paging"); }
        
    }
}

#endregion

#region ReturnTypes for Region

// WriteReturnTypeFields(Region)
namespace Sparkle.LinkedInNET.Region
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class RegionFields {
    }
}

#endregion

#region ReturnTypes for Ads

// WriteReturnTypes(Ads, AdAnalytics)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'AdAnalytics'
    /// </summary>
    [Serializable, XmlRoot("AdAnalytics")]
    public class AdAnalytics
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<AdAnalyticsElement> Elements { get; set; }

        /// <summary>
        /// Field: 'paging' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "paging")]
        [JsonProperty(PropertyName = "paging")]
        public Common.Paging Paging { get; set; }

    }
}

// WriteReturnTypes(Ads, AdAnalyticsElement)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'AdAnalyticsElement'
    /// </summary>
    [Serializable, XmlRoot("AdAnalyticsElement")]
    public class AdAnalyticsElement
    {
        /// <summary>
        /// Field: 'actionClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actionClicks")]
        [JsonProperty(PropertyName = "actionClicks")]
        public int ActionClicks { get; set; }

        /// <summary>
        /// Field: 'adUnitClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "adUnitClicks")]
        [JsonProperty(PropertyName = "adUnitClicks")]
        public int AdUnitClicks { get; set; }

        /// <summary>
        /// Field: 'clicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "clicks")]
        [JsonProperty(PropertyName = "clicks")]
        public int Clicks { get; set; }

        /// <summary>
        /// Field: 'companyPageClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "companyPageClicks")]
        [JsonProperty(PropertyName = "companyPageClicks")]
        public int CompanyPageClicks { get; set; }

        /// <summary>
        /// Field: 'landingPageClicks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "landingPageClicks")]
        [JsonProperty(PropertyName = "landingPageClicks")]
        public int LandingPageClicks { get; set; }

        /// <summary>
        /// Field: 'comments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "comments")]
        [JsonProperty(PropertyName = "comments")]
        public int Comments { get; set; }

        /// <summary>
        /// Field: 'dateRange' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "dateRange")]
        [JsonProperty(PropertyName = "dateRange")]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// Field: 'follows' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "follows")]
        [JsonProperty(PropertyName = "follows")]
        public int Follows { get; set; }

        /// <summary>
        /// Field: 'shares' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shares")]
        [JsonProperty(PropertyName = "shares")]
        public int Shares { get; set; }

        /// <summary>
        /// Field: 'likes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "likes")]
        [JsonProperty(PropertyName = "likes")]
        public int Likes { get; set; }

        /// <summary>
        /// Field: 'totalEngagements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "totalEngagements")]
        [JsonProperty(PropertyName = "totalEngagements")]
        public int TotalEngagements { get; set; }

        /// <summary>
        /// Field: 'otherEngagements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "otherEngagements")]
        [JsonProperty(PropertyName = "otherEngagements")]
        public int OtherEngagements { get; set; }

        /// <summary>
        /// Field: 'impressions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "impressions")]
        [JsonProperty(PropertyName = "impressions")]
        public int Impressions { get; set; }

        /// <summary>
        /// Field: 'viralImpressions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "viralImpressions")]
        [JsonProperty(PropertyName = "viralImpressions")]
        public int ViralImpressions { get; set; }

        /// <summary>
        /// Field: 'viralTotalEngagements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "viralTotalEngagements")]
        [JsonProperty(PropertyName = "viralTotalEngagements")]
        public int ViralTotalEngagements { get; set; }

    }
}

// WriteReturnTypes(Ads, End)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'End'
    /// </summary>
    [Serializable, XmlRoot("End")]
    public class End
    {
        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        [JsonProperty(PropertyName = "day")]
        public int Day { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        [JsonProperty(PropertyName = "month")]
        public int Month { get; set; }

        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        [JsonProperty(PropertyName = "year")]
        public int Year { get; set; }

    }
}

// WriteReturnTypes(Ads, Start)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Start'
    /// </summary>
    [Serializable, XmlRoot("Start")]
    public class Start
    {
        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        [JsonProperty(PropertyName = "day")]
        public int Day { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        [JsonProperty(PropertyName = "month")]
        public int Month { get; set; }

        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        [JsonProperty(PropertyName = "year")]
        public int Year { get; set; }

    }
}

// WriteReturnTypes(Ads, DateRange)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'DateRange'
    /// </summary>
    [Serializable, XmlRoot("DateRange")]
    public class DateRange
    {
        /// <summary>
        /// Field: 'end' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end")]
        [JsonProperty(PropertyName = "end")]
        public End End { get; set; }

        /// <summary>
        /// Field: 'start' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start")]
        [JsonProperty(PropertyName = "start")]
        public Start Start { get; set; }

    }
}

// WriteReturnTypeFields(Ads)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'AdAnalytics', 'AdAnalyticsElement', 'End', 'Start', 'DateRange' return types.
    /// </summary>
    public static class AdsFields {
        /// <summary>
        /// Includes the field 'elements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalytics> WithElements(this FieldSelector<AdAnalytics> me) { return me.Add("elements"); }
        
        /// <summary>
        /// Includes the field 'paging'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalytics> WithPaging(this FieldSelector<AdAnalytics> me) { return me.Add("paging"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalytics> WithAllFields(this FieldSelector<AdAnalytics> me) { return me.AddRange("elements", "paging"); }
        
        /// <summary>
        /// Includes the field 'actionClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithActionClicks(this FieldSelector<AdAnalyticsElement> me) { return me.Add("actionClicks"); }
        
        /// <summary>
        /// Includes the field 'adUnitClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithAdUnitClicks(this FieldSelector<AdAnalyticsElement> me) { return me.Add("adUnitClicks"); }
        
        /// <summary>
        /// Includes the field 'clicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithClicks(this FieldSelector<AdAnalyticsElement> me) { return me.Add("clicks"); }
        
        /// <summary>
        /// Includes the field 'companyPageClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithCompanyPageClicks(this FieldSelector<AdAnalyticsElement> me) { return me.Add("companyPageClicks"); }
        
        /// <summary>
        /// Includes the field 'landingPageClicks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithLandingPageClicks(this FieldSelector<AdAnalyticsElement> me) { return me.Add("landingPageClicks"); }
        
        /// <summary>
        /// Includes the field 'comments'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithComments(this FieldSelector<AdAnalyticsElement> me) { return me.Add("comments"); }
        
        /// <summary>
        /// Includes the field 'dateRange'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithDateRange(this FieldSelector<AdAnalyticsElement> me) { return me.Add("dateRange"); }
        
        /// <summary>
        /// Includes the field 'follows'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithFollows(this FieldSelector<AdAnalyticsElement> me) { return me.Add("follows"); }
        
        /// <summary>
        /// Includes the field 'shares'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithShares(this FieldSelector<AdAnalyticsElement> me) { return me.Add("shares"); }
        
        /// <summary>
        /// Includes the field 'likes'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithLikes(this FieldSelector<AdAnalyticsElement> me) { return me.Add("likes"); }
        
        /// <summary>
        /// Includes the field 'totalEngagements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithTotalEngagements(this FieldSelector<AdAnalyticsElement> me) { return me.Add("totalEngagements"); }
        
        /// <summary>
        /// Includes the field 'otherEngagements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithOtherEngagements(this FieldSelector<AdAnalyticsElement> me) { return me.Add("otherEngagements"); }
        
        /// <summary>
        /// Includes the field 'impressions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithImpressions(this FieldSelector<AdAnalyticsElement> me) { return me.Add("impressions"); }
        
        /// <summary>
        /// Includes the field 'viralImpressions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithViralImpressions(this FieldSelector<AdAnalyticsElement> me) { return me.Add("viralImpressions"); }
        
        /// <summary>
        /// Includes the field 'viralTotalEngagements'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithViralTotalEngagements(this FieldSelector<AdAnalyticsElement> me) { return me.Add("viralTotalEngagements"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<AdAnalyticsElement> WithAllFields(this FieldSelector<AdAnalyticsElement> me) { return me.AddRange("actionClicks", "adUnitClicks", "clicks", "companyPageClicks", "landingPageClicks", "comments", "dateRange", "follows", "shares", "likes", "totalEngagements", "otherEngagements", "impressions", "viralImpressions", "viralTotalEngagements"); }
        
        /// <summary>
        /// Includes the field 'day'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<End> WithDay(this FieldSelector<End> me) { return me.Add("day"); }
        
        /// <summary>
        /// Includes the field 'month'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<End> WithMonth(this FieldSelector<End> me) { return me.Add("month"); }
        
        /// <summary>
        /// Includes the field 'year'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<End> WithYear(this FieldSelector<End> me) { return me.Add("year"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<End> WithAllFields(this FieldSelector<End> me) { return me.AddRange("day", "month", "year"); }
        
        /// <summary>
        /// Includes the field 'day'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Start> WithDay(this FieldSelector<Start> me) { return me.Add("day"); }
        
        /// <summary>
        /// Includes the field 'month'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Start> WithMonth(this FieldSelector<Start> me) { return me.Add("month"); }
        
        /// <summary>
        /// Includes the field 'year'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Start> WithYear(this FieldSelector<Start> me) { return me.Add("year"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Start> WithAllFields(this FieldSelector<Start> me) { return me.AddRange("day", "month", "year"); }
        
        /// <summary>
        /// Includes the field 'end'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateRange> WithEnd(this FieldSelector<DateRange> me) { return me.Add("end"); }
        
        /// <summary>
        /// Includes the field 'start'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateRange> WithStart(this FieldSelector<DateRange> me) { return me.Add("start"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateRange> WithAllFields(this FieldSelector<DateRange> me) { return me.AddRange("end", "start"); }
        
    }
}

#endregion

#region ReturnTypes for Common

// WriteReturnTypes(Common, PostShare)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShare'
    /// </summary>
    [Serializable, XmlRoot("PostShare")]
    public class PostShare
    {
        /// <summary>
        /// Field: 'owner' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "owner")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public PostShareText Text { get; set; }

        /// <summary>
        /// Field: 'subject' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "subject")]
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Field: 'distribution' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distribution")]
        [JsonProperty(PropertyName = "distribution")]
        public Distribution Distribution { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public PostShareContent Content { get; set; }

    }
}

// WriteReturnTypes(Common, text)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'text'
    /// </summary>
    [Serializable, XmlRoot("text")]
    public class PostShareText
    {
        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Field: 'annotations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "annotations")]
        [JsonProperty(PropertyName = "annotations")]
        public List<PostShareAnnotations> Annotations { get; set; }

    }
}

// WriteReturnTypes(Common, postShareAnnotations)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'postShareAnnotations'
    /// </summary>
    [Serializable, XmlRoot("postShareAnnotations")]
    public class PostShareAnnotations
    {
        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string Entity { get; set; }

        /// <summary>
        /// Field: 'length' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "length")]
        [JsonProperty(PropertyName = "length")]
        public int Length { get; set; }

        /// <summary>
        /// Field: 'start' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start")]
        [JsonProperty(PropertyName = "start")]
        public int Start { get; set; }

    }
}

// WriteReturnTypes(Common, postShareContent)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'postShareContent'
    /// </summary>
    [Serializable, XmlRoot("postShareContent")]
    public class PostShareContent
    {
        /// <summary>
        /// Field: 'contentEntities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "contentEntities")]
        [JsonProperty(PropertyName = "contentEntities")]
        public List<PostShareContentEntities> ContentEntities { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'shareMediaCategory' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "shareMediaCategory")]
        [JsonProperty(PropertyName = "shareMediaCategory")]
        public string MediaCategory { get; set; }

    }
}

// WriteReturnTypes(Common, postShareContentEntities)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'postShareContentEntities'
    /// </summary>
    [Serializable, XmlRoot("postShareContentEntities")]
    public class PostShareContentEntities
    {
        /// <summary>
        /// Field: 'entity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entity")]
        [JsonProperty(PropertyName = "entity")]
        public string Entity { get; set; }

        /// <summary>
        /// Field: 'entityLocation' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entityLocation")]
        [JsonProperty(PropertyName = "entityLocation")]
        public string EntityLocation { get; set; }

        /// <summary>
        /// Field: 'thumbnails' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "thumbnails")]
        [JsonProperty(PropertyName = "thumbnails")]
        public List<PostShareContentThumbnails> Thumbnails { get; set; }

    }
}

// WriteReturnTypes(Common, PostShareContentThumbnails)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShareContentThumbnails'
    /// </summary>
    [Serializable, XmlRoot("PostShareContentThumbnails")]
    public class PostShareContentThumbnails
    {
        /// <summary>
        /// Field: 'imageSpecificContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "imageSpecificContent")]
        [JsonProperty(PropertyName = "imageSpecificContent")]
        public JObject ImageSpecificContent { get; set; }

        /// <summary>
        /// Field: 'publishers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publishers")]
        [JsonProperty(PropertyName = "publishers")]
        public JObject Publishers { get; set; }

        /// <summary>
        /// Field: 'resolvedUrl' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "resolvedUrl")]
        [JsonProperty(PropertyName = "resolvedUrl")]
        public string ResolvedUrl { get; set; }

        /// <summary>
        /// Field: 'authors' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authors")]
        [JsonProperty(PropertyName = "authors")]
        public JObject Authors { get; set; }

    }
}

// WriteReturnTypes(Common, PostShareResult)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShareResult'
    /// </summary>
    [Serializable, XmlRoot("PostShareResult")]
    public class PostShareResult
    {
        /// <summary>
        /// Field: 'owner' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "owner")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Field: 'activity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "activity")]
        [JsonProperty(PropertyName = "activity")]
        public string Activity { get; set; }

        /// <summary>
        /// Field: 'edited' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "edited")]
        [JsonProperty(PropertyName = "edited")]
        public bool Edited { get; set; }

        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public ShareTime Created { get; set; }

        /// <summary>
        /// Field: 'subject' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "subject")]
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public ShareTime LastModified { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public PostShareText Text { get; set; }

        /// <summary>
        /// Field: 'distribution' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distribution")]
        [JsonProperty(PropertyName = "distribution")]
        public Distribution Distribution { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public PostShareContent Content { get; set; }

    }
}

// WriteReturnTypes(Common, multiLocaleString)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'multiLocaleString'
    /// </summary>
    [Serializable, XmlRoot("multiLocaleString")]
    public class MultiLocaleString
    {
        /// <summary>
        /// Field: 'localized' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "localized")]
        [JsonProperty(PropertyName = "localized")]
        public JObject Localized { get; set; }

        /// <summary>
        /// Field: 'preferredLocale' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "preferredLocale")]
        [JsonProperty(PropertyName = "preferredLocale")]
        public JObject PreferredLocale { get; set; }

    }
}

// WriteReturnTypes(Common, multiLocaleRichText)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'multiLocaleRichText'
    /// </summary>
    [Serializable, XmlRoot("multiLocaleRichText")]
    public class MultiLocaleRichText
    {
        /// <summary>
        /// Field: 'localized' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "localized")]
        [JsonProperty(PropertyName = "localized")]
        public JObject Localized { get; set; }

        /// <summary>
        /// Field: 'preferredLocale' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "preferredLocale")]
        [JsonProperty(PropertyName = "preferredLocale")]
        public JObject PreferredLocale { get; set; }

    }
}

// WriteReturnTypes(Common, localeString)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'localeString'
    /// </summary>
    [Serializable, XmlRoot("localeString")]
    public class LocaleString
    {
        /// <summary>
        /// Field: 'locale' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "locale")]
        [JsonProperty(PropertyName = "locale")]
        public Locale locale { get; set; }

        /// <summary>
        /// Field: 'value' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "value")]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

    }
}

// WriteReturnTypes(Common, shareCreated)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'shareCreated'
    /// </summary>
    [Serializable, XmlRoot("shareCreated")]
    public class ShareTime
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'time' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "time")]
        [JsonProperty(PropertyName = "time")]
        public long Time { get; set; }

    }
}

// WriteReturnTypes(Common, UGCDistribution)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'UGCDistribution'
    /// </summary>
    [Serializable, XmlRoot("UGCDistribution")]
    public class UGCDistribution
    {
        /// <summary>
        /// Field: 'externalDistributionChannels' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "externalDistributionChannels")]
        [JsonProperty(PropertyName = "externalDistributionChannels")]
        public List<ExternalDistributionChannels> ExternalDistributionChannels { get; set; }

        /// <summary>
        /// Field: 'distributedViaFollowFeed' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distributedViaFollowFeed")]
        [JsonProperty(PropertyName = "distributedViaFollowFeed")]
        public bool DistributedViaFollowFeed { get; set; }

    }
}

// WriteReturnTypes(Common, distribution)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'distribution'
    /// </summary>
    [Serializable, XmlRoot("distribution")]
    public class Distribution
    {
        /// <summary>
        /// Field: 'linkedInDistributionTarget' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "linkedInDistributionTarget")]
        [JsonProperty(PropertyName = "linkedInDistributionTarget")]
        public LinkedInDistributionTarget LinkedInDistributionTarget { get; set; }

    }
}

// WriteReturnTypes(Common, LinkedInDistributionTarget)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'LinkedInDistributionTarget'
    /// </summary>
    [Serializable, XmlRoot("LinkedInDistributionTarget")]
    public class LinkedInDistributionTarget
    {
        /// <summary>
        /// Field: 'connectionsOnly' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "connectionsOnly")]
        [JsonProperty(PropertyName = "connectionsOnly")]
        public bool ConnectionsOnly { get; set; }

        /// <summary>
        /// Field: 'industries' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industries")]
        [JsonProperty(PropertyName = "industries")]
        public List<string> Industries { get; set; }

        /// <summary>
        /// Field: 'interfaceLocales' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "interfaceLocales")]
        [JsonProperty(PropertyName = "interfaceLocales")]
        public List<Locale> InterfaceLocales { get; set; }

        /// <summary>
        /// Field: 'jobFunctions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "jobFunctions")]
        [JsonProperty(PropertyName = "jobFunctions")]
        public List<string> JobFunctions { get; set; }

        /// <summary>
        /// Field: 'geoLocations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "geoLocations")]
        [JsonProperty(PropertyName = "geoLocations")]
        public List<string> GeoLocations { get; set; }

        /// <summary>
        /// Field: 'seniorities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "seniorities")]
        [JsonProperty(PropertyName = "seniorities")]
        public List<string> Seniorities { get; set; }

        /// <summary>
        /// Field: 'staffCountRanges' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "staffCountRanges")]
        [JsonProperty(PropertyName = "staffCountRanges")]
        public List<string> StaffCountRanges { get; set; }

        /// <summary>
        /// Field: 'visibleToGuest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibleToGuest")]
        [JsonProperty(PropertyName = "visibleToGuest")]
        public bool VisibleToGuest { get; set; }

    }
}

// WriteReturnTypes(Common, LinkedInTargetedEntity)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'LinkedInTargetedEntity'
    /// </summary>
    [Serializable, XmlRoot("LinkedInTargetedEntity")]
    public class LinkedInTargetedEntity
    {
        /// <summary>
        /// Field: 'industries' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industries")]
        [JsonProperty(PropertyName = "industries")]
        public List<string> Industries { get; set; }

        /// <summary>
        /// Field: 'interfaceLocales' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "interfaceLocales")]
        [JsonProperty(PropertyName = "interfaceLocales")]
        public List<Locale> InterfaceLocales { get; set; }

        /// <summary>
        /// Field: 'jobFunctions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "jobFunctions")]
        [JsonProperty(PropertyName = "jobFunctions")]
        public List<string> JobFunctions { get; set; }

        /// <summary>
        /// Field: 'geoLocations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "geoLocations")]
        [JsonProperty(PropertyName = "geoLocations")]
        public List<string> GeoLocations { get; set; }

        /// <summary>
        /// Field: 'seniorities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "seniorities")]
        [JsonProperty(PropertyName = "seniorities")]
        public List<string> Seniorities { get; set; }

        /// <summary>
        /// Field: 'staffCountRanges' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "staffCountRanges")]
        [JsonProperty(PropertyName = "staffCountRanges")]
        public List<string> StaffCountRanges { get; set; }

        /// <summary>
        /// Field: 'connectionsOnly' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "connectionsOnly")]
        [JsonProperty(PropertyName = "connectionsOnly")]
        public bool ConnectionsOnly { get; set; }

        /// <summary>
        /// Field: 'visibleToGuest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibleToGuest")]
        [JsonProperty(PropertyName = "visibleToGuest")]
        public bool VisibleToGuest { get; set; }

    }
}

// WriteReturnTypes(Common, Locale)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Locale'
    /// </summary>
    [Serializable, XmlRoot("Locale")]
    public class Locale
    {
        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Field: 'language' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "language")]
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

    }
}

// WriteReturnTypes(Common, paging)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'paging'
    /// </summary>
    [Serializable, XmlRoot("paging")]
    public class Paging
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "total")]
        [JsonProperty(PropertyName = "total")]
        public int Total { get; set; }

        /// <summary>
        /// Field: 'count' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "count")]
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Field: 'start' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start")]
        [JsonProperty(PropertyName = "start")]
        public int Start { get; set; }

        /// <summary>
        /// Field: 'links' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "links")]
        [JsonProperty(PropertyName = "links")]
        public List<LinkPaging> Links { get; set; }

    }
}

// WriteReturnTypes(Common, LinkPaging)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'LinkPaging'
    /// </summary>
    [Serializable, XmlRoot("LinkPaging")]
    public class LinkPaging
    {
        /// <summary>
        /// Field: 'rel' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "rel")]
        [JsonProperty(PropertyName = "rel")]
        public string Rel { get; set; }

        /// <summary>
        /// Field: 'href' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "href")]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }

        /// <summary>
        /// Field: 'type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "type")]
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}

// WriteReturnTypes(Common, mediaUploadData)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'mediaUploadData'
    /// </summary>
    [Serializable, XmlRoot("mediaUploadData")]
    public class MediaUploadData
    {
        /// <summary>
        /// Field: 'data' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "data")]
        [JsonProperty(PropertyName = "data")]
        public byte[] Data { get; set; }

    }
}

// WriteReturnTypes(Common, Followers)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'Followers'
    /// </summary>
    [Serializable, XmlRoot("Followers")]
    public class Followers
    {
        /// <summary>
        /// Field: 'firstDegreeSize' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstDegreeSize")]
        [JsonProperty(PropertyName = "firstDegreeSize")]
        public int FirstDegreeSize { get; set; }

    }
}

// WriteReturnTypes(Common, ExternalDistributionChannels)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'ExternalDistributionChannels'
    /// </summary>
    [Serializable, XmlRoot("ExternalDistributionChannels")]
    public class ExternalDistributionChannels
    {
        /// <summary>
        /// Field: 'externalDistributionChannelType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "externalDistributionChannelType")]
        [JsonProperty(PropertyName = "externalDistributionChannelType")]
        public string ExternalDistributionChannelType { get; set; }

    }
}

// WriteReturnTypeFields(Common)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'PostShare', 'text', 'postShareAnnotations', 'postShareContent', 'postShareContentEntities', 'PostShareContentThumbnails', 'PostShareResult', 'multiLocaleString', 'multiLocaleRichText', 'localeString', 'shareCreated', 'UGCDistribution', 'distribution', 'LinkedInDistributionTarget', 'LinkedInTargetedEntity', 'Locale', 'paging', 'LinkPaging', 'mediaUploadData', 'Followers', 'ExternalDistributionChannels' return types.
    /// </summary>
    public static class CommonFields {
    }
}

#endregion

#region API clients

// WriteApiGroup(Profiles)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Profiles'
            /// </summary>
            public class ProfilesApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal ProfilesApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// The profile of the current user
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api
                /// </remarks>
                public Profiles.Person GetMyProfile(
                      UserAuthorization user 
                    , string[] acceptLanguages 
                    , FieldSelector<Profiles.Person> fields = null
                )
                {
                    string urlFormat = "/v2/me?{FieldSelector}";
                    var url = FormatUrl(urlFormat, fields);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.AcceptLanguages = acceptLanguages;
                    context.Method =  "GET";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Profiles.Person>(context);
                    return result;
                }

                    /// <summary>
                    /// The profile of the current user
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api
                    /// </remarks>
                    public async Task<Profiles.Person> GetMyProfileAsync(
                          UserAuthorization user 
                        , string[] acceptLanguages 
                        , FieldSelector<Profiles.Person> fields = null
                    )
                    {
                        string urlFormat = "/v2/me?{FieldSelector}";
                        var url = FormatUrl(urlFormat, fields);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.AcceptLanguages = acceptLanguages;
                        context.Method =  "GET";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Profiles.Person>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// The profile of the current user
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api
                        /// </remarks>
                        public Profiles.Person GetProfile(
                              UserAuthorization user 
                            , string profileId 
                            , FieldSelector<Profiles.Person> fields = null
                        )
                        {
                            string skipUrlParamsEscape = "";
                            string urlFormat = "/v2/people/(id:{profileId})";
                            var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "profileId", profileId);
                            var query = "projection=(*,profilePicture(displayImage~:playableStreams))";

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context, true))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<Profiles.Person>(context);
                            return result;
                        }

                            /// <summary>
                            /// The profile of the current user
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api
                            /// </remarks>
                            public async Task<Profiles.Person> GetProfileAsync(
                                  UserAuthorization user 
                                , string profileId 
                                , FieldSelector<Profiles.Person> fields = null
                            )
                            {
                                string skipUrlParamsEscape = "";
                                string urlFormat = "/v2/people/(id:{profileId})";
                                var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "profileId", profileId);
                                var query = "projection=(*,profilePicture(displayImage~:playableStreams))";

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context, true);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<Profiles.Person>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// The profile of the current user
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api                PersonIds must have the following schema: (id:personId),(id:personId1):(id:personId2)
                                /// </remarks>
                                public Profiles.PersonList GetProfilesByIds(
                                      UserAuthorization user 
                                    , string personIds 
                                    , FieldSelector<Profiles.PersonList> fields = null
                                )
                                {
                                    string skipUrlParamsEscape = "personIds";
                                    var url = "/v2/people";
                                    string queryFormat = "ids=List({personIds})&projection=(*,results(*(*,profilePicture(displayImage~:playableStreams))))";
                                    var query = FormatQuery(queryFormat, fields, skipUrlParamsEscape, "personIds", personIds);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    // Requires for GET post tunneling
                                    this.CreateTunnelingPostStream(context, query);

                                    if (!this.ExecuteQuery(context, true))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<Profiles.PersonList>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// The profile of the current user
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api                PersonIds must have the following schema: (id:personId),(id:personId1):(id:personId2)
                                    /// </remarks>
                                    public async Task<Profiles.PersonList> GetProfilesByIdsAsync(
                                          UserAuthorization user 
                                        , string personIds 
                                        , FieldSelector<Profiles.PersonList> fields = null
                                    )
                                    {
                                        string skipUrlParamsEscape = "personIds";
                                        var url = "/v2/people";
                                        string queryFormat = "ids=List({personIds})&projection=(*,results(*(*,profilePicture(displayImage~:playableStreams))))";
                                        var query = FormatQuery(queryFormat, fields, skipUrlParamsEscape, "personIds", personIds);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        // Requires for GET post tunneling
                                        this.CreateTunnelingPostStream(context, query);

                                        var exec = await this.ExecuteQueryAsync(context, true);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<Profiles.PersonList>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// 
                                        /// </summary>
                                        public Profiles.DegreeSize GetFirstDegreeConnections(
                                              UserAuthorization user 
                                            , string profileId 
                                        )
                                        {
                                            string skipUrlParamsEscape = "";
                                            string urlFormat = "/v2/connections/urn:li:person:{profileId}";
                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "profileId", profileId);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "GET";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<Profiles.DegreeSize>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// 
                                            /// </summary>
                                            public async Task<Profiles.DegreeSize> GetFirstDegreeConnectionsAsync(
                                                  UserAuthorization user 
                                                , string profileId 
                                            )
                                            {
                                                string skipUrlParamsEscape = "";
                                                string urlFormat = "/v2/connections/urn:li:person:{profileId}";
                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "profileId", profileId);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "GET";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<Profiles.DegreeSize>(context);
                                                return result;
                                            }
                                                
            }
        }

// WriteApiGroup(Organizations)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Organizations'
            /// </summary>
            public class OrganizationsApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal OrganizationsApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Retrieve a company by using the company ID
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                /// </remarks>
                public Organizations.Organization GetById(
                      UserAuthorization user 
                    , string companyId 
                    , FieldSelector<Organizations.Organization> fields = null
                )
                {
                    string skipUrlParamsEscape = "";
                    string urlFormat = "/v2/organizations/{CompanyId}";
                    var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "CompanyId", companyId);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "GET";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Organizations.Organization>(context);
                    return result;
                }

                    /// <summary>
                    /// Retrieve a company by using the company ID
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                    /// </remarks>
                    public async Task<Organizations.Organization> GetByIdAsync(
                          UserAuthorization user 
                        , string companyId 
                        , FieldSelector<Organizations.Organization> fields = null
                    )
                    {
                        string skipUrlParamsEscape = "";
                        string urlFormat = "/v2/organizations/{CompanyId}";
                        var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "CompanyId", companyId);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "GET";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Organizations.Organization>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// Retrieve a company brand by using the company ID
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                        /// </remarks>
                        public Organizations.Organization GetOrganizationBrandById(
                              UserAuthorization user 
                            , string companyId 
                            , FieldSelector<Organizations.Organization> fields = null
                        )
                        {
                            string skipUrlParamsEscape = "";
                            string urlFormat = "/v2/organizationBrands/{CompanyId}";
                            var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "CompanyId", companyId);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "GET";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<Organizations.Organization>(context);
                            return result;
                        }

                            /// <summary>
                            /// Retrieve a company brand by using the company ID
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                            /// </remarks>
                            public async Task<Organizations.Organization> GetOrganizationBrandByIdAsync(
                                  UserAuthorization user 
                                , string companyId 
                                , FieldSelector<Organizations.Organization> fields = null
                            )
                            {
                                string skipUrlParamsEscape = "";
                                string urlFormat = "/v2/organizationBrands/{CompanyId}";
                                var url = FormatUrl(urlFormat, fields, skipUrlParamsEscape, "CompanyId", companyId);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "GET";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<Organizations.Organization>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// Retrieve an organization pagestatistics by using the company ID
                                /// </summary>
                                public Organizations.OrganizationPageStatistics GetOrganizationPerformanceData(
                                      UserAuthorization user 
                                    , string companyId 
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    var url = "/v2/organizationPageStatistics";
                                    string queryFormat = "q=organization&organization=urn:li:organization:{CompanyId}";
                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    // Requires for GET post tunneling
                                    this.CreateTunnelingPostStream(context, query);

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<Organizations.OrganizationPageStatistics>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// Retrieve an organization pagestatistics by using the company ID
                                    /// </summary>
                                    public async Task<Organizations.OrganizationPageStatistics> GetOrganizationPerformanceDataAsync(
                                          UserAuthorization user 
                                        , string companyId 
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        var url = "/v2/organizationPageStatistics";
                                        string queryFormat = "q=organization&organization=urn:li:organization:{CompanyId}";
                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        // Requires for GET post tunneling
                                        this.CreateTunnelingPostStream(context, query);

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<Organizations.OrganizationPageStatistics>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// Retrieve list of companies where current user is administrator and is approved
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                                        /// </remarks>
                                        public Organizations.OrganizationalEntityAcls GetUserAdminApprOrganizations(
                                              UserAuthorization user 
                                            , FieldSelector<Organizations.OrganizationalEntityAcls> fields = null
                                        )
                                        {
                                            var url = "/v2/organizationalEntityAcls";
                                            var query = "q=roleAssignee&role=ADMINISTRATOR&projection=(elements*(*,organizationalTarget~(id, name, vanityName, logoV2(original~:playableStreams))))";

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "POST";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                            // Requires for GET post tunneling
                                            this.CreateTunnelingPostStream(context, query);

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<Organizations.OrganizationalEntityAcls>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// Retrieve list of companies where current user is administrator and is approved
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api
                                            /// </remarks>
                                            public async Task<Organizations.OrganizationalEntityAcls> GetUserAdminApprOrganizationsAsync(
                                                  UserAuthorization user 
                                                , FieldSelector<Organizations.OrganizationalEntityAcls> fields = null
                                            )
                                            {
                                                var url = "/v2/organizationalEntityAcls";
                                                var query = "q=roleAssignee&role=ADMINISTRATOR&projection=(elements*(*,organizationalTarget~(id, name, vanityName, logoV2(original~:playableStreams))))";

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "POST";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                // Requires for GET post tunneling
                                                this.CreateTunnelingPostStream(context, query);

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<Organizations.OrganizationalEntityAcls>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// Retrieve Follower Statistics
                                                /// </summary>
                                                /// <remarks>
                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics
                                                /// </remarks>
                                                public Organizations.OrgFollowerStatistic GetOrgFollowerStatistics(
                                                      UserAuthorization user 
                                                    , string companyId 
                                                )
                                                {
                                                    string skipUrlParamsEscape = "";
                                                    var url = "/v2/organizationalEntityFollowerStatistics";
                                                    string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}";
                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    // Requires for GET post tunneling
                                                    this.CreateTunnelingPostStream(context, query);

                                                    if (!this.ExecuteQuery(context))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = this.HandleJsonResponse<Organizations.OrgFollowerStatistic>(context);
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// Retrieve Follower Statistics
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics
                                                    /// </remarks>
                                                    public async Task<Organizations.OrgFollowerStatistic> GetOrgFollowerStatisticsAsync(
                                                          UserAuthorization user 
                                                        , string companyId 
                                                    )
                                                    {
                                                        string skipUrlParamsEscape = "";
                                                        var url = "/v2/organizationalEntityFollowerStatistics";
                                                        string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}";
                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        // Requires for GET post tunneling
                                                        this.CreateTunnelingPostStream(context, query);

                                                        var exec = await this.ExecuteQueryAsync(context);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = this.HandleJsonResponse<Organizations.OrgFollowerStatistic>(context);
                                                        return result;
                                                    }
                                                        
                                                        /// <summary>
                                                        /// Retrieve Organizations By Key
                                                        /// </summary>
                                                        /// <remarks>
                                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-search?context=linkedin/compliance/context#search-by-keywords
                                                        /// </remarks>
                                                        public Organizations.Mentions GetOrganizationsByKey(
                                                              UserAuthorization user 
                                                            , string keyword 
                                                            , int start = 0
                                                            , int count = 50
                                                        )
                                                        {
                                                            string skipUrlParamsEscape = "";
                                                            var url = "/v2/search";
                                                            string queryFormat = "q=companiesV2&baseSearchParams.keywords={keyword}&start={int Start = 0}&count={int Count = 50}&projection=(elements*(entity~(id, name, vanityName, logoV2(original~:playableStreams))),paging)";
                                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "keyword", keyword, "int Start = 0", start, "int Count = 50", count);

                                                            var context = new RequestContext();
                                                            context.UserAuthorization = user;
                                                            context.Method =  "POST";
                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                            // Requires for GET post tunneling
                                                            this.CreateTunnelingPostStream(context, query);

                                                            if (!this.ExecuteQuery(context))
                                                                this.HandleJsonErrorResponse(context);
                                                            
                                                            var result = this.HandleJsonResponse<Organizations.Mentions>(context);
                                                            return result;
                                                        }

                                                            /// <summary>
                                                            /// Retrieve Organizations By Key
                                                            /// </summary>
                                                            /// <remarks>
                                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-search?context=linkedin/compliance/context#search-by-keywords
                                                            /// </remarks>
                                                            public async Task<Organizations.Mentions> GetOrganizationsByKeyAsync(
                                                                  UserAuthorization user 
                                                                , string keyword 
                                                                , int start = 0
                                                                , int count = 50
                                                            )
                                                            {
                                                                string skipUrlParamsEscape = "";
                                                                var url = "/v2/search";
                                                                string queryFormat = "q=companiesV2&baseSearchParams.keywords={keyword}&start={int Start = 0}&count={int Count = 50}&projection=(elements*(entity~(id, name, vanityName, logoV2(original~:playableStreams))),paging)";
                                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "keyword", keyword, "int Start = 0", start, "int Count = 50", count);

                                                                var context = new RequestContext();
                                                                context.UserAuthorization = user;
                                                                context.Method =  "POST";
                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                // Requires for GET post tunneling
                                                                this.CreateTunnelingPostStream(context, query);

                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                if (!exec)
                                                                    this.HandleJsonErrorResponse(context);
                                                                
                                                                var result = this.HandleJsonResponse<Organizations.Mentions>(context);
                                                                return result;
                                                            }
                                                                
                                                                /// <summary>
                                                                /// Retrieve Follower Count
                                                                /// </summary>
                                                                /// <remarks>
                                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api#retrieve-organization-follower-count
                                                                /// </remarks>
                                                                public Common.Followers GetOrganizationFollowerCount(
                                                                      UserAuthorization user 
                                                                    , string companyId 
                                                                )
                                                                {
                                                                    string skipUrlParamsEscape = "";
                                                                    string urlFormat = "/v2/networkSizes/urn:li:organization:{CompanyId}";
                                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);
                                                                    var query = "edgeType=CompanyFollowedByMember";

                                                                    var context = new RequestContext();
                                                                    context.UserAuthorization = user;
                                                                    context.Method =  "POST";
                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                    // Requires for GET post tunneling
                                                                    this.CreateTunnelingPostStream(context, query);

                                                                    if (!this.ExecuteQuery(context))
                                                                        this.HandleJsonErrorResponse(context);
                                                                    
                                                                    var result = this.HandleJsonResponse<Common.Followers>(context);
                                                                    return result;
                                                                }

                                                                    /// <summary>
                                                                    /// Retrieve Follower Count
                                                                    /// </summary>
                                                                    /// <remarks>
                                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api#retrieve-organization-follower-count
                                                                    /// </remarks>
                                                                    public async Task<Common.Followers> GetOrganizationFollowerCountAsync(
                                                                          UserAuthorization user 
                                                                        , string companyId 
                                                                    )
                                                                    {
                                                                        string skipUrlParamsEscape = "";
                                                                        string urlFormat = "/v2/networkSizes/urn:li:organization:{CompanyId}";
                                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId);
                                                                        var query = "edgeType=CompanyFollowedByMember";

                                                                        var context = new RequestContext();
                                                                        context.UserAuthorization = user;
                                                                        context.Method =  "POST";
                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                        // Requires for GET post tunneling
                                                                        this.CreateTunnelingPostStream(context, query);

                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                        if (!exec)
                                                                            this.HandleJsonErrorResponse(context);
                                                                        
                                                                        var result = this.HandleJsonResponse<Common.Followers>(context);
                                                                        return result;
                                                                    }
                                                                        
            }
        }

// WriteApiGroup(Shares)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Shares'
            /// </summary>
            public class SharesApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal SharesApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Share a profile/ company update based on an existing update.
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/share-api
                /// </remarks>
                public Common.PostShareResult Post(
                      UserAuthorization user 
                    , Common.PostShare postData
                )
                {
                    var url = "/v2/shares";

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    this.CreateJsonPostStream(context, postData);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Common.PostShareResult>(context);
                    return result;
                }

                    /// <summary>
                    /// Share a profile/ company update based on an existing update.
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/share-api
                    /// </remarks>
                    public async Task<Common.PostShareResult> PostAsync(
                          UserAuthorization user 
                        , Common.PostShare postData
                    )
                    {
                        var url = "/v2/shares";

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        this.CreateJsonPostStream(context, postData);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Common.PostShareResult>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// Fetch lifetime share statistics for two specific organization shares.
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                        /// </remarks>
                        public Shares.ShareStatistic GetShareStatistics(
                              UserAuthorization user 
                            , string companyId 
                            , string shareId 
                        )
                        {
                            string skipUrlParamsEscape = "";
                            var url = "/v2/organizationalEntityShareStatistics";
                            string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]=urn:li:share:{ShareId}";
                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<Shares.ShareStatistic>(context);
                            return result;
                        }

                            /// <summary>
                            /// Fetch lifetime share statistics for two specific organization shares.
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                            /// </remarks>
                            public async Task<Shares.ShareStatistic> GetShareStatisticsAsync(
                                  UserAuthorization user 
                                , string companyId 
                                , string shareId 
                            )
                            {
                                string skipUrlParamsEscape = "";
                                var url = "/v2/organizationalEntityShareStatistics";
                                string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]=urn:li:share:{ShareId}";
                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<Shares.ShareStatistic>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// Fetch lifetime share post statistics for two specific organization share posts.
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                                /// </remarks>
                                public Shares.PostStatistic GetSharePostStatistics(
                                      UserAuthorization user 
                                    , string companyId 
                                    , string shareId 
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    var url = "/v2/organizationalEntityShareStatistics";
                                    string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]={ShareId}";
                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    // Requires for GET post tunneling
                                    this.CreateTunnelingPostStream(context, query);

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<Shares.PostStatistic>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// Fetch lifetime share post statistics for two specific organization share posts.
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                                    /// </remarks>
                                    public async Task<Shares.PostStatistic> GetSharePostStatisticsAsync(
                                          UserAuthorization user 
                                        , string companyId 
                                        , string shareId 
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        var url = "/v2/organizationalEntityShareStatistics";
                                        string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]={ShareId}";
                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        // Requires for GET post tunneling
                                        this.CreateTunnelingPostStream(context, query);

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<Shares.PostStatistic>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// Fetch day based share statistics for two specific organization shares.
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://developer.linkedin.com/docs/guide/v2/organizations/share-statistics
                                        /// </remarks>
                                        public Shares.ShareStatistic GetShareStatisticsPerDay(
                                              UserAuthorization user 
                                            , string companyId 
                                            , string shareId 
                                            , string startTimestamp 
                                            , string endTimestamp 
                                        )
                                        {
                                            string skipUrlParamsEscape = "";
                                            var url = "/v2/organizationalEntityShareStatistics";
                                            string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]=urn:li:share:{ShareId}&timeIntervals.timeGranularityType=DAY&timeIntervals.timeRange.start={StartTimestamp}&timeIntervals.timeRange.end={EndTimestamp}";
                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId, "StartTimestamp", startTimestamp, "EndTimestamp", endTimestamp);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "POST";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                            // Requires for GET post tunneling
                                            this.CreateTunnelingPostStream(context, query);

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<Shares.ShareStatistic>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// Fetch day based share statistics for two specific organization shares.
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://developer.linkedin.com/docs/guide/v2/organizations/share-statistics
                                            /// </remarks>
                                            public async Task<Shares.ShareStatistic> GetShareStatisticsPerDayAsync(
                                                  UserAuthorization user 
                                                , string companyId 
                                                , string shareId 
                                                , string startTimestamp 
                                                , string endTimestamp 
                                            )
                                            {
                                                string skipUrlParamsEscape = "";
                                                var url = "/v2/organizationalEntityShareStatistics";
                                                string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]=urn:li:share:{ShareId}&timeIntervals.timeGranularityType=DAY&timeIntervals.timeRange.start={StartTimestamp}&timeIntervals.timeRange.end={EndTimestamp}";
                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId, "StartTimestamp", startTimestamp, "EndTimestamp", endTimestamp);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "POST";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                // Requires for GET post tunneling
                                                this.CreateTunnelingPostStream(context, query);

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<Shares.ShareStatistic>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// Fetch day based share post statistics for two specific organization share posts.
                                                /// </summary>
                                                /// <remarks>
                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                                                /// </remarks>
                                                public Shares.PostStatistic GetSharePostStatisticsPerDay(
                                                      UserAuthorization user 
                                                    , string companyId 
                                                    , string shareId 
                                                    , string startTimestamp 
                                                    , string endTimestamp 
                                                )
                                                {
                                                    string skipUrlParamsEscape = "";
                                                    var url = "/v2/organizationalEntityShareStatistics";
                                                    string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]={ShareId}&timeIntervals.timeGranularityType=DAY&timeIntervals.timeRange.start={StartTimestamp}&timeIntervals.timeRange.end={EndTimestamp}";
                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId, "StartTimestamp", startTimestamp, "EndTimestamp", endTimestamp);

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    // Requires for GET post tunneling
                                                    this.CreateTunnelingPostStream(context, query);

                                                    if (!this.ExecuteQuery(context))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = this.HandleJsonResponse<Shares.PostStatistic>(context);
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// Fetch day based share post statistics for two specific organization share posts.
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics
                                                    /// </remarks>
                                                    public async Task<Shares.PostStatistic> GetSharePostStatisticsPerDayAsync(
                                                          UserAuthorization user 
                                                        , string companyId 
                                                        , string shareId 
                                                        , string startTimestamp 
                                                        , string endTimestamp 
                                                    )
                                                    {
                                                        string skipUrlParamsEscape = "";
                                                        var url = "/v2/organizationalEntityShareStatistics";
                                                        string queryFormat = "q=organizationalEntity&organizationalEntity=urn:li:organization:{CompanyId}&shares[0]={ShareId}&timeIntervals.timeGranularityType=DAY&timeIntervals.timeRange.start={StartTimestamp}&timeIntervals.timeRange.end={EndTimestamp}";
                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "CompanyId", companyId, "ShareId", shareId, "StartTimestamp", startTimestamp, "EndTimestamp", endTimestamp);

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        // Requires for GET post tunneling
                                                        this.CreateTunnelingPostStream(context, query);

                                                        var exec = await this.ExecuteQueryAsync(context);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = this.HandleJsonResponse<Shares.PostStatistic>(context);
                                                        return result;
                                                    }
                                                        
                                                        /// <summary>
                                                        /// Shares will be ordered by created time with the latest one being the first.                 We recommend setting the sharesPerOwner to 1,000 and count to 50, which means our endpoint will return up to 1,000 shares per owner                 while the total elements returned per response will be 50. If you want the next 50 of 1,000, you will have to paginate with start query parameter.
                                                        /// </summary>
                                                        /// <remarks>
                                                        /// See https://developer.linkedin.com/docs/guide/v2/shares/share-api#types
                                                        /// </remarks>
                                                        public Shares.PostShares GetShares(
                                                              UserAuthorization user 
                                                            , string urn 
                                                            , int sharesPerOwner = 1000
                                                            , int count = 50
                                                            , int start = 0
                                                        )
                                                        {
                                                            string skipUrlParamsEscape = "";
                                                            var url = "/v2/shares";
                                                            string queryFormat = "q=owners&owners={urn}&sharesPerOwner={int SharesPerOwner = 1000}&count={int Count = 50}&start={int Start = 0}";
                                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "int SharesPerOwner = 1000", sharesPerOwner, "int Count = 50", count, "int Start = 0", start);

                                                            var context = new RequestContext();
                                                            context.UserAuthorization = user;
                                                            context.Method =  "POST";
                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                            // Requires for GET post tunneling
                                                            this.CreateTunnelingPostStream(context, query);

                                                            if (!this.ExecuteQuery(context))
                                                                this.HandleJsonErrorResponse(context);
                                                            
                                                            var result = this.HandleJsonResponse<Shares.PostShares>(context);
                                                            return result;
                                                        }

                                                            /// <summary>
                                                            /// Shares will be ordered by created time with the latest one being the first.                 We recommend setting the sharesPerOwner to 1,000 and count to 50, which means our endpoint will return up to 1,000 shares per owner                 while the total elements returned per response will be 50. If you want the next 50 of 1,000, you will have to paginate with start query parameter.
                                                            /// </summary>
                                                            /// <remarks>
                                                            /// See https://developer.linkedin.com/docs/guide/v2/shares/share-api#types
                                                            /// </remarks>
                                                            public async Task<Shares.PostShares> GetSharesAsync(
                                                                  UserAuthorization user 
                                                                , string urn 
                                                                , int sharesPerOwner = 1000
                                                                , int count = 50
                                                                , int start = 0
                                                            )
                                                            {
                                                                string skipUrlParamsEscape = "";
                                                                var url = "/v2/shares";
                                                                string queryFormat = "q=owners&owners={urn}&sharesPerOwner={int SharesPerOwner = 1000}&count={int Count = 50}&start={int Start = 0}";
                                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "int SharesPerOwner = 1000", sharesPerOwner, "int Count = 50", count, "int Start = 0", start);

                                                                var context = new RequestContext();
                                                                context.UserAuthorization = user;
                                                                context.Method =  "POST";
                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                // Requires for GET post tunneling
                                                                this.CreateTunnelingPostStream(context, query);

                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                if (!exec)
                                                                    this.HandleJsonErrorResponse(context);
                                                                
                                                                var result = this.HandleJsonResponse<Shares.PostShares>(context);
                                                                return result;
                                                            }
                                                                
            }
        }

// WriteApiGroup(Videos)
namespace Sparkle.LinkedInNET.Videos
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Videos'
            /// </summary>
            public class VideosApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal VideosApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Fetch stats for video:                 aggregation: DAY, WEEK, ALL                 type: VIDEO_VIEW, VIEWER, TIME_WATCHED, TIME_WATCHED_FOR_VIDEO_VIEWS
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/video-analytics-api
                /// </remarks>
                public Videos.VideoAnalytics GetVideoStatistics(
                      UserAuthorization user 
                    , string videoPostId 
                    , string type 
                    , string aggregation 
                )
                {
                    string skipUrlParamsEscape = "";
                    var url = "/v2/videoAnalytics";
                    string queryFormat = "q=entity&entity={videoPostId}&type={type}&aggregation={aggregation}";
                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "videoPostId", videoPostId, "type", type, "aggregation", aggregation);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    // Requires for GET post tunneling
                    this.CreateTunnelingPostStream(context, query);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Videos.VideoAnalytics>(context);
                    return result;
                }

                    /// <summary>
                    /// Fetch stats for video:                 aggregation: DAY, WEEK, ALL                 type: VIDEO_VIEW, VIEWER, TIME_WATCHED, TIME_WATCHED_FOR_VIDEO_VIEWS
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/video-analytics-api
                    /// </remarks>
                    public async Task<Videos.VideoAnalytics> GetVideoStatisticsAsync(
                          UserAuthorization user 
                        , string videoPostId 
                        , string type 
                        , string aggregation 
                    )
                    {
                        string skipUrlParamsEscape = "";
                        var url = "/v2/videoAnalytics";
                        string queryFormat = "q=entity&entity={videoPostId}&type={type}&aggregation={aggregation}";
                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "videoPostId", videoPostId, "type", type, "aggregation", aggregation);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        // Requires for GET post tunneling
                        this.CreateTunnelingPostStream(context, query);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Videos.VideoAnalytics>(context);
                        return result;
                    }
                        
            }
        }

// WriteApiGroup(Media)
namespace Sparkle.LinkedInNET.Media
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Media'
            /// </summary>
            public class MediaApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal MediaApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// This api is deprecated. To upload rich media, attach the media as multipart/form-data.
                /// </summary>
                /// <remarks>
                /// See https://developer.linkedin.com/docs/guide/v2/shares/rich-media-shares
                /// </remarks>
                public Media.MediaPostResult Post(
                      UserAuthorization user 
                    , Common.MediaUploadData postData
                )
                {
                    var url = "/media/upload";

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    this.CreateMultiPartStream(context, postData);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Media.MediaPostResult>(context);
                    return result;
                }

                    /// <summary>
                    /// This api is deprecated. To upload rich media, attach the media as multipart/form-data.
                    /// </summary>
                    /// <remarks>
                    /// See https://developer.linkedin.com/docs/guide/v2/shares/rich-media-shares
                    /// </remarks>
                    public async Task<Media.MediaPostResult> PostAsync(
                          UserAuthorization user 
                        , Common.MediaUploadData postData
                    )
                    {
                        var url = "/media/upload";

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        this.CreateMultiPartStream(context, postData);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Media.MediaPostResult>(context);
                        return result;
                    }
                        
            }
        }

// WriteApiGroup(UGCPost)
namespace Sparkle.LinkedInNET.UGCPost
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'UGCPost'
            /// </summary>
            public class UGCPostApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal UGCPostApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Upload a video asset to create a UGC Post.
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api
                /// </remarks>
                public string Post(
                      UserAuthorization user 
                    , UGCPost.UGCPostData postData
                )
                {
                    var url = "/v2/ugcPosts";

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    this.CreateJsonPostStream(context, postData);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                                
                        var result = string.Empty;
                        var headerETag = context.ResponseHeaders.GetValues("X-RestLi-Id");
                        if (headerETag != null && headerETag.Length > 0)
                        {
                            result = headerETag.First();
                            result = result.TrimEnd('"').TrimStart('"');
                        }
                    return result;
                }

                    /// <summary>
                    /// Upload a video asset to create a UGC Post.
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api
                    /// </remarks>
                    public async Task<string> PostAsync(
                          UserAuthorization user 
                        , UGCPost.UGCPostData postData
                    )
                    {
                        var url = "/v2/ugcPosts";

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        this.CreateJsonPostStream(context, postData);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                                    
                        var result = string.Empty;
                        var headerETag = context.ResponseHeaders.GetValues("X-RestLi-Id");
                        if (headerETag != null && headerETag.Length > 0)
                        {
                            result = headerETag.First();
                            result = result.TrimEnd('"').TrimStart('"');
                        }
                        return result;
                    }
                        
                        /// <summary>
                        /// Get posts with Video urns. UGCPosts will be ordered by created time with the latest one being the first.                We recommend setting the sharesPerOwner to 1,000 and count to 50, which means our endpoint will return up to 1,000 shares per owner while the total elements returned per response will be 50. If you want the next 50 of 1,000, you will have to paginate with start query parameter.
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#retrieve-ugc-posts
                        /// </remarks>
                        public UGCPost.UGCPostItems GetUGCPosts(
                              UserAuthorization user 
                            , string urn 
                            , int start = 0
                            , int count = 50
                        )
                        {
                            string skipUrlParamsEscape = "";
                            var url = "/v2/ugcPosts";
                            string queryFormat = "q=authors&authors=List({urn})&start={int Start = 0}&count={int Count = 50}";
                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "int Start = 0", start, "int Count = 50", count);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<UGCPost.UGCPostItems>(context);
                            return result;
                        }

                            /// <summary>
                            /// Get posts with Video urns. UGCPosts will be ordered by created time with the latest one being the first.                We recommend setting the sharesPerOwner to 1,000 and count to 50, which means our endpoint will return up to 1,000 shares per owner while the total elements returned per response will be 50. If you want the next 50 of 1,000, you will have to paginate with start query parameter.
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#retrieve-ugc-posts
                            /// </remarks>
                            public async Task<UGCPost.UGCPostItems> GetUGCPostsAsync(
                                  UserAuthorization user 
                                , string urn 
                                , int start = 0
                                , int count = 50
                            )
                            {
                                string skipUrlParamsEscape = "";
                                var url = "/v2/ugcPosts";
                                string queryFormat = "q=authors&authors=List({urn})&start={int Start = 0}&count={int Count = 50}";
                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "int Start = 0", start, "int Count = 50", count);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<UGCPost.UGCPostItems>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// Get posts by urn.
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#get-ugc-posts-by-urn
                                /// </remarks>
                                public UGCPost.UGCPostItemResult GetUGCPost(
                                      UserAuthorization user 
                                    , string urn 
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    string urlFormat = "/v2/ugcPosts/{urn}";
                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "GET";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<UGCPost.UGCPostItemResult>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// Get posts by urn.
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#get-ugc-posts-by-urn
                                    /// </remarks>
                                    public async Task<UGCPost.UGCPostItemResult> GetUGCPostAsync(
                                          UserAuthorization user 
                                        , string urn 
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        string urlFormat = "/v2/ugcPosts/{urn}";
                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "GET";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<UGCPost.UGCPostItemResult>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// Get posts by urn.
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#get-ugc-posts-by-urn
                                        /// </remarks>
                                        public dynamic DeleteUGCPost(
                                              UserAuthorization user 
                                            , string urn 
                                        )
                                        {
                                            string skipUrlParamsEscape = "";
                                            string urlFormat = "/v2/ugcPosts/{urn}";
                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "DELETE";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<dynamic>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// Get posts by urn.
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#get-ugc-posts-by-urn
                                            /// </remarks>
                                            public async Task<dynamic> DeleteUGCPostAsync(
                                                  UserAuthorization user 
                                                , string urn 
                                            )
                                            {
                                                string skipUrlParamsEscape = "";
                                                string urlFormat = "/v2/ugcPosts/{urn}";
                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "DELETE";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<dynamic>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// Get Video by urn
                                                /// </summary>
                                                /// <remarks>
                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#requesting-playable-video-streams
                                                /// </remarks>
                                                public UGCPost.UGCVideo GetUGCVideo(
                                                      UserAuthorization user 
                                                    , string urn 
                                                )
                                                {
                                                    string skipUrlParamsEscape = "";
                                                    string urlFormat = "/v2/ugcPosts/{urn}";
                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);
                                                    var query = "viewContext=AUTHOR&projection=(specificContent(com.linkedin.ugc.ShareContent(media(*(media~:playableStreams)))))";

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    // Requires for GET post tunneling
                                                    this.CreateTunnelingPostStream(context, query);

                                                    if (!this.ExecuteQuery(context))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = this.HandleJsonResponse<UGCPost.UGCVideo>(context);
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// Get Video by urn
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/ugc-post-api#requesting-playable-video-streams
                                                    /// </remarks>
                                                    public async Task<UGCPost.UGCVideo> GetUGCVideoAsync(
                                                          UserAuthorization user 
                                                        , string urn 
                                                    )
                                                    {
                                                        string skipUrlParamsEscape = "";
                                                        string urlFormat = "/v2/ugcPosts/{urn}";
                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);
                                                        var query = "viewContext=AUTHOR&projection=(specificContent(com.linkedin.ugc.ShareContent(media(*(media~:playableStreams)))))";

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        // Requires for GET post tunneling
                                                        this.CreateTunnelingPostStream(context, query);

                                                        var exec = await this.ExecuteQueryAsync(context);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = this.HandleJsonResponse<UGCPost.UGCVideo>(context);
                                                        return result;
                                                    }
                                                        
            }
        }

// WriteApiGroup(SocialActions)
namespace Sparkle.LinkedInNET.SocialActions
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'SocialActions'
            /// </summary>
            public class SocialActionsApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal SocialActionsApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Retrieve Comments by Share/ UGC/ Comment
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                /// </remarks>
                public SocialActions.Comments GetCommentsByUrn(
                      UserAuthorization user 
                    , string urn 
                    , int count = 50
                    , int start = 0
                )
                {
                    string skipUrlParamsEscape = "urn";
                    string urlFormat = "/v2/socialActions/{urn}/comments";
                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);
                    string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    // Requires for GET post tunneling
                    this.CreateTunnelingPostStream(context, query);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                    return result;
                }

                    /// <summary>
                    /// Retrieve Comments by Share/ UGC/ Comment
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                    /// </remarks>
                    public async Task<SocialActions.Comments> GetCommentsByUrnAsync(
                          UserAuthorization user 
                        , string urn 
                        , int count = 50
                        , int start = 0
                    )
                    {
                        string skipUrlParamsEscape = "urn";
                        string urlFormat = "/v2/socialActions/{urn}/comments";
                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);
                        string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        // Requires for GET post tunneling
                        this.CreateTunnelingPostStream(context, query);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// Retrieve Comments on Shares
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                        /// </remarks>
                        public SocialActions.Comments GetCommentsOnShare(
                              UserAuthorization user 
                            , string shareId 
                            , int count = 50
                            , int start = 0
                        )
                        {
                            string skipUrlParamsEscape = "";
                            string urlFormat = "/v2/socialActions/urn:li:share:{ShareId}/comments";
                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "ShareId", shareId);
                            string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                            return result;
                        }

                            /// <summary>
                            /// Retrieve Comments on Shares
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                            /// </remarks>
                            public async Task<SocialActions.Comments> GetCommentsOnShareAsync(
                                  UserAuthorization user 
                                , string shareId 
                                , int count = 50
                                , int start = 0
                            )
                            {
                                string skipUrlParamsEscape = "";
                                string urlFormat = "/v2/socialActions/urn:li:share:{ShareId}/comments";
                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "ShareId", shareId);
                                string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// Retrieve Comments on UGC Posts
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                                /// </remarks>
                                public SocialActions.Comments GetCommentsOnUGCPost(
                                      UserAuthorization user 
                                    , string postId 
                                    , int count = 50
                                    , int start = 0
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    string urlFormat = "/v2/socialActions/urn:li:ugcPost:{PostId}/comments";
                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "PostId", postId);
                                    string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    // Requires for GET post tunneling
                                    this.CreateTunnelingPostStream(context, query);

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// Retrieve Comments on UGC Posts
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                                    /// </remarks>
                                    public async Task<SocialActions.Comments> GetCommentsOnUGCPostAsync(
                                          UserAuthorization user 
                                        , string postId 
                                        , int count = 50
                                        , int start = 0
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        string urlFormat = "/v2/socialActions/urn:li:ugcPost:{PostId}/comments";
                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "PostId", postId);
                                        string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        // Requires for GET post tunneling
                                        this.CreateTunnelingPostStream(context, query);

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// Retrieve Comments on Comment
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                                        /// </remarks>
                                        public SocialActions.Comments GetCommentsOnComment(
                                              UserAuthorization user 
                                            , string commentId 
                                            , int count = 50
                                            , int start = 0
                                        )
                                        {
                                            string skipUrlParamsEscape = "CommentId";
                                            string urlFormat = "/v2/socialActions/urn:li:comment:{CommentId}/comments";
                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CommentId", commentId);
                                            string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "POST";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                            // Requires for GET post tunneling
                                            this.CreateTunnelingPostStream(context, query);

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// Retrieve Comments on Comment
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#retrieve-comments-on-shares
                                            /// </remarks>
                                            public async Task<SocialActions.Comments> GetCommentsOnCommentAsync(
                                                  UserAuthorization user 
                                                , string commentId 
                                                , int count = 50
                                                , int start = 0
                                            )
                                            {
                                                string skipUrlParamsEscape = "CommentId";
                                                string urlFormat = "/v2/socialActions/urn:li:comment:{CommentId}/comments";
                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CommentId", commentId);
                                                string queryFormat = "count={int Count = 50}&start={int Start = 0}";
                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "int Count = 50", count, "int Start = 0", start);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "POST";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                // Requires for GET post tunneling
                                                this.CreateTunnelingPostStream(context, query);

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<SocialActions.Comments>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// Create Comment on Share/ UGC/ Comment
                                                /// </summary>
                                                /// <remarks>
                                                /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                /// </remarks>
                                                public SocialActions.CommentResult CreateFirstLevelCommentOnUrn(
                                                      UserAuthorization user 
                                                    , string urn 
                                                    , SocialActions.CreateFirstLevelCommentRequest postData
                                                )
                                                {
                                                    string skipUrlParamsEscape = "urn";
                                                    string urlFormat = "/v2/socialActions/{urn}/comments";
                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    this.CreateJsonPostStream(context, postData);

                                                    if (!this.ExecuteQuery(context))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// Create Comment on Share/ UGC/ Comment
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                    /// </remarks>
                                                    public async Task<SocialActions.CommentResult> CreateFirstLevelCommentOnUrnAsync(
                                                          UserAuthorization user 
                                                        , string urn 
                                                        , SocialActions.CreateFirstLevelCommentRequest postData
                                                    )
                                                    {
                                                        string skipUrlParamsEscape = "urn";
                                                        string urlFormat = "/v2/socialActions/{urn}/comments";
                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        this.CreateJsonPostStream(context, postData);

                                                        var exec = await this.ExecuteQueryAsync(context);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                        return result;
                                                    }
                                                        
                                                        /// <summary>
                                                        /// Create Comment on Share/ UGC/ Comment
                                                        /// </summary>
                                                        /// <remarks>
                                                        /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                        /// </remarks>
                                                        public SocialActions.CommentResult CreateCommentOnUrn(
                                                              UserAuthorization user 
                                                            , string urn 
                                                            , SocialActions.CreateCommentRequest postData
                                                        )
                                                        {
                                                            string skipUrlParamsEscape = "urn";
                                                            string urlFormat = "/v2/socialActions/{urn}/comments";
                                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                            var context = new RequestContext();
                                                            context.UserAuthorization = user;
                                                            context.Method =  "POST";
                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                            this.CreateJsonPostStream(context, postData);

                                                            if (!this.ExecuteQuery(context))
                                                                this.HandleJsonErrorResponse(context);
                                                            
                                                            var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                            return result;
                                                        }

                                                            /// <summary>
                                                            /// Create Comment on Share/ UGC/ Comment
                                                            /// </summary>
                                                            /// <remarks>
                                                            /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                            /// </remarks>
                                                            public async Task<SocialActions.CommentResult> CreateCommentOnUrnAsync(
                                                                  UserAuthorization user 
                                                                , string urn 
                                                                , SocialActions.CreateCommentRequest postData
                                                            )
                                                            {
                                                                string skipUrlParamsEscape = "urn";
                                                                string urlFormat = "/v2/socialActions/{urn}/comments";
                                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                                var context = new RequestContext();
                                                                context.UserAuthorization = user;
                                                                context.Method =  "POST";
                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                this.CreateJsonPostStream(context, postData);

                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                if (!exec)
                                                                    this.HandleJsonErrorResponse(context);
                                                                
                                                                var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                return result;
                                                            }
                                                                
                                                                /// <summary>
                                                                /// Create Comment on Share
                                                                /// </summary>
                                                                /// <remarks>
                                                                /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                /// </remarks>
                                                                public SocialActions.CommentResult CreateCommentOnShare(
                                                                      UserAuthorization user 
                                                                    , string shareId 
                                                                    , SocialActions.CreateCommentRequest postData
                                                                )
                                                                {
                                                                    string skipUrlParamsEscape = "";
                                                                    string urlFormat = "/v2/socialActions/urn:li:share:{ShareId}/comments";
                                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "ShareId", shareId);

                                                                    var context = new RequestContext();
                                                                    context.UserAuthorization = user;
                                                                    context.Method =  "POST";
                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                    this.CreateJsonPostStream(context, postData);

                                                                    if (!this.ExecuteQuery(context))
                                                                        this.HandleJsonErrorResponse(context);
                                                                    
                                                                    var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                    return result;
                                                                }

                                                                    /// <summary>
                                                                    /// Create Comment on Share
                                                                    /// </summary>
                                                                    /// <remarks>
                                                                    /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                    /// </remarks>
                                                                    public async Task<SocialActions.CommentResult> CreateCommentOnShareAsync(
                                                                          UserAuthorization user 
                                                                        , string shareId 
                                                                        , SocialActions.CreateCommentRequest postData
                                                                    )
                                                                    {
                                                                        string skipUrlParamsEscape = "";
                                                                        string urlFormat = "/v2/socialActions/urn:li:share:{ShareId}/comments";
                                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "ShareId", shareId);

                                                                        var context = new RequestContext();
                                                                        context.UserAuthorization = user;
                                                                        context.Method =  "POST";
                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                        this.CreateJsonPostStream(context, postData);

                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                        if (!exec)
                                                                            this.HandleJsonErrorResponse(context);
                                                                        
                                                                        var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                        return result;
                                                                    }
                                                                        
                                                                        /// <summary>
                                                                        /// Create Comment on UGC Posts
                                                                        /// </summary>
                                                                        /// <remarks>
                                                                        /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                        /// </remarks>
                                                                        public SocialActions.CommentResult CreateCommentOnUGCPost(
                                                                              UserAuthorization user 
                                                                            , string postId 
                                                                            , SocialActions.CreateCommentRequest postData
                                                                        )
                                                                        {
                                                                            string skipUrlParamsEscape = "";
                                                                            string urlFormat = "/v2/socialActions/urn:li:ugcPost:{PostId}/comments";
                                                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "PostId", postId);

                                                                            var context = new RequestContext();
                                                                            context.UserAuthorization = user;
                                                                            context.Method =  "POST";
                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                            this.CreateJsonPostStream(context, postData);

                                                                            if (!this.ExecuteQuery(context))
                                                                                this.HandleJsonErrorResponse(context);
                                                                            
                                                                            var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                            return result;
                                                                        }

                                                                            /// <summary>
                                                                            /// Create Comment on UGC Posts
                                                                            /// </summary>
                                                                            /// <remarks>
                                                                            /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                            /// </remarks>
                                                                            public async Task<SocialActions.CommentResult> CreateCommentOnUGCPostAsync(
                                                                                  UserAuthorization user 
                                                                                , string postId 
                                                                                , SocialActions.CreateCommentRequest postData
                                                                            )
                                                                            {
                                                                                string skipUrlParamsEscape = "";
                                                                                string urlFormat = "/v2/socialActions/urn:li:ugcPost:{PostId}/comments";
                                                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "PostId", postId);

                                                                                var context = new RequestContext();
                                                                                context.UserAuthorization = user;
                                                                                context.Method =  "POST";
                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                this.CreateJsonPostStream(context, postData);

                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                if (!exec)
                                                                                    this.HandleJsonErrorResponse(context);
                                                                                
                                                                                var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                                return result;
                                                                            }
                                                                                
                                                                                /// <summary>
                                                                                /// Create Comment on Comment
                                                                                /// </summary>
                                                                                /// <remarks>
                                                                                /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                                /// </remarks>
                                                                                public SocialActions.CommentResult CreateCommentOnComment(
                                                                                      UserAuthorization user 
                                                                                    , string commentId 
                                                                                    , SocialActions.CreateCommentRequest postData
                                                                                )
                                                                                {
                                                                                    string skipUrlParamsEscape = "CommentId";
                                                                                    string urlFormat = "/v2/socialActions/urn:li:comment:{CommentId}/comments";
                                                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CommentId", commentId);

                                                                                    var context = new RequestContext();
                                                                                    context.UserAuthorization = user;
                                                                                    context.Method =  "POST";
                                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                    this.CreateJsonPostStream(context, postData);

                                                                                    if (!this.ExecuteQuery(context))
                                                                                        this.HandleJsonErrorResponse(context);
                                                                                    
                                                                                    var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                                    return result;
                                                                                }

                                                                                    /// <summary>
                                                                                    /// Create Comment on Comment
                                                                                    /// </summary>
                                                                                    /// <remarks>
                                                                                    /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-comment
                                                                                    /// </remarks>
                                                                                    public async Task<SocialActions.CommentResult> CreateCommentOnCommentAsync(
                                                                                          UserAuthorization user 
                                                                                        , string commentId 
                                                                                        , SocialActions.CreateCommentRequest postData
                                                                                    )
                                                                                    {
                                                                                        string skipUrlParamsEscape = "CommentId";
                                                                                        string urlFormat = "/v2/socialActions/urn:li:comment:{CommentId}/comments";
                                                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "CommentId", commentId);

                                                                                        var context = new RequestContext();
                                                                                        context.UserAuthorization = user;
                                                                                        context.Method =  "POST";
                                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                        this.CreateJsonPostStream(context, postData);

                                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                                        if (!exec)
                                                                                            this.HandleJsonErrorResponse(context);
                                                                                        
                                                                                        var result = this.HandleJsonResponse<SocialActions.CommentResult>(context);
                                                                                        return result;
                                                                                    }
                                                                                        
                                                                                        /// <summary>
                                                                                        /// Create a Like
                                                                                        /// </summary>
                                                                                        /// <remarks>
                                                                                        /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-a-like-on-a-share
                                                                                        /// </remarks>
                                                                                        public SocialActions.CreateLikeResult CreateLike(
                                                                                              UserAuthorization user 
                                                                                            , string urn 
                                                                                            , SocialActions.CreateLikeRequest postData
                                                                                        )
                                                                                        {
                                                                                            string skipUrlParamsEscape = "urn";
                                                                                            string urlFormat = "/v2/socialActions/{urn}/likes";
                                                                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                                                            var context = new RequestContext();
                                                                                            context.UserAuthorization = user;
                                                                                            context.Method =  "POST";
                                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                            this.CreateJsonPostStream(context, postData);

                                                                                            if (!this.ExecuteQuery(context))
                                                                                                this.HandleJsonErrorResponse(context);
                                                                                            
                                                                                            var result = this.HandleJsonResponse<SocialActions.CreateLikeResult>(context);
                                                                                            return result;
                                                                                        }

                                                                                            /// <summary>
                                                                                            /// Create a Like
                                                                                            /// </summary>
                                                                                            /// <remarks>
                                                                                            /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#create-a-like-on-a-share
                                                                                            /// </remarks>
                                                                                            public async Task<SocialActions.CreateLikeResult> CreateLikeAsync(
                                                                                                  UserAuthorization user 
                                                                                                , string urn 
                                                                                                , SocialActions.CreateLikeRequest postData
                                                                                            )
                                                                                            {
                                                                                                string skipUrlParamsEscape = "urn";
                                                                                                string urlFormat = "/v2/socialActions/{urn}/likes";
                                                                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn);

                                                                                                var context = new RequestContext();
                                                                                                context.UserAuthorization = user;
                                                                                                context.Method =  "POST";
                                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                this.CreateJsonPostStream(context, postData);

                                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                                if (!exec)
                                                                                                    this.HandleJsonErrorResponse(context);
                                                                                                
                                                                                                var result = this.HandleJsonResponse<SocialActions.CreateLikeResult>(context);
                                                                                                return result;
                                                                                            }
                                                                                                
                                                                                                /// <summary>
                                                                                                /// Delete a Like
                                                                                                /// </summary>
                                                                                                /// <remarks>
                                                                                                /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#delete-a-like
                                                                                                /// </remarks>
                                                                                                public dynamic DeleteLike(
                                                                                                      UserAuthorization user 
                                                                                                    , string urn 
                                                                                                    , string actorUrn 
                                                                                                    , string creatorActorUrn 
                                                                                                )
                                                                                                {
                                                                                                    string skipUrlParamsEscape = "urn,actorUrn";
                                                                                                    string urlFormat = "/v2/socialActions/{urn}/likes/{actorUrn}?actor={creatorActorUrn}";
                                                                                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "actorUrn", actorUrn, "creatorActorUrn", creatorActorUrn);

                                                                                                    var context = new RequestContext();
                                                                                                    context.UserAuthorization = user;
                                                                                                    context.Method =  "DELETE";
                                                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                                    if (!this.ExecuteQuery(context))
                                                                                                        this.HandleJsonErrorResponse(context);
                                                                                                    
                                                                                                    var result = this.HandleJsonResponse<dynamic>(context);
                                                                                                    return result;
                                                                                                }

                                                                                                    /// <summary>
                                                                                                    /// Delete a Like
                                                                                                    /// </summary>
                                                                                                    /// <remarks>
                                                                                                    /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#delete-a-like
                                                                                                    /// </remarks>
                                                                                                    public async Task<dynamic> DeleteLikeAsync(
                                                                                                          UserAuthorization user 
                                                                                                        , string urn 
                                                                                                        , string actorUrn 
                                                                                                        , string creatorActorUrn 
                                                                                                    )
                                                                                                    {
                                                                                                        string skipUrlParamsEscape = "urn,actorUrn";
                                                                                                        string urlFormat = "/v2/socialActions/{urn}/likes/{actorUrn}?actor={creatorActorUrn}";
                                                                                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "actorUrn", actorUrn, "creatorActorUrn", creatorActorUrn);

                                                                                                        var context = new RequestContext();
                                                                                                        context.UserAuthorization = user;
                                                                                                        context.Method =  "DELETE";
                                                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                                                        if (!exec)
                                                                                                            this.HandleJsonErrorResponse(context);
                                                                                                        
                                                                                                        var result = this.HandleJsonResponse<dynamic>(context);
                                                                                                        return result;
                                                                                                    }
                                                                                                        
                                                                                                        /// <summary>
                                                                                                        /// Delete Comment
                                                                                                        /// </summary>
                                                                                                        /// <remarks>
                                                                                                        /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#delete-comment-from-share
                                                                                                        /// </remarks>
                                                                                                        public dynamic DeleteComment(
                                                                                                              UserAuthorization user 
                                                                                                            , string urn 
                                                                                                            , string commentId 
                                                                                                            , string actorUrn 
                                                                                                        )
                                                                                                        {
                                                                                                            string skipUrlParamsEscape = "urn";
                                                                                                            string urlFormat = "/v2/socialActions/{urn}/comments/{commentId}?actor={actorUrn}";
                                                                                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "commentId", commentId, "actorUrn", actorUrn);

                                                                                                            var context = new RequestContext();
                                                                                                            context.UserAuthorization = user;
                                                                                                            context.Method =  "DELETE";
                                                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                                            if (!this.ExecuteQuery(context))
                                                                                                                this.HandleJsonErrorResponse(context);
                                                                                                            
                                                                                                            var result = this.HandleJsonResponse<dynamic>(context);
                                                                                                            return result;
                                                                                                        }

                                                                                                            /// <summary>
                                                                                                            /// Delete Comment
                                                                                                            /// </summary>
                                                                                                            /// <remarks>
                                                                                                            /// https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions#delete-comment-from-share
                                                                                                            /// </remarks>
                                                                                                            public async Task<dynamic> DeleteCommentAsync(
                                                                                                                  UserAuthorization user 
                                                                                                                , string urn 
                                                                                                                , string commentId 
                                                                                                                , string actorUrn 
                                                                                                            )
                                                                                                            {
                                                                                                                string skipUrlParamsEscape = "urn";
                                                                                                                string urlFormat = "/v2/socialActions/{urn}/comments/{commentId}?actor={actorUrn}";
                                                                                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "urn", urn, "commentId", commentId, "actorUrn", actorUrn);

                                                                                                                var context = new RequestContext();
                                                                                                                context.UserAuthorization = user;
                                                                                                                context.Method =  "DELETE";
                                                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                                                if (!exec)
                                                                                                                    this.HandleJsonErrorResponse(context);
                                                                                                                
                                                                                                                var result = this.HandleJsonResponse<dynamic>(context);
                                                                                                                return result;
                                                                                                            }
                                                                                                                
            }
        }

// WriteApiGroup(Asset)
namespace Sparkle.LinkedInNET.Asset
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Asset'
            /// </summary>
            public class AssetApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal AssetApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// To upload video.
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                /// </remarks>
                public Asset.RegisterUploadResult RegisterUpload(
                      UserAuthorization user 
                    , Asset.RegisterUploadRequest postData
                )
                {
                    var url = "/v2/assets?action=registerUpload";

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    this.CreateJsonPostStream(context, postData);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Asset.RegisterUploadResult>(context);
                    return result;
                }

                    /// <summary>
                    /// To upload video.
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                    /// </remarks>
                    public async Task<Asset.RegisterUploadResult> RegisterUploadAsync(
                          UserAuthorization user 
                        , Asset.RegisterUploadRequest postData
                    )
                    {
                        var url = "/v2/assets?action=registerUpload";

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        this.CreateJsonPostStream(context, postData);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Asset.RegisterUploadResult>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// To upload video. Gets back the status code of the request.
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                        /// </remarks>
                        public string UploadAsset(
                              string uploadUrl 
                            , Asset.UploadAssetRequest postData
                        )
                        {
                            string skipUrlParamsEscape = "";
                            string urlFormat = "{UploadUrl}";
                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "UploadUrl", uploadUrl);

                            var context = new RequestContext();
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            this.CreateOctetStream(context, postData);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                                        
                        var result = string.Empty;
                        var headerETag = context.ResponseHeaders.GetValues("eTag");
                        if (headerETag != null && headerETag.Length > 0)
                        {
                            result = headerETag.First();
                            result = result.TrimEnd('"').TrimStart('"');
                        }
                            return result;
                        }

                            /// <summary>
                            /// To upload video. Gets back the status code of the request.
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                            /// </remarks>
                            public async Task<string> UploadAssetAsync(
                                  string uploadUrl 
                                , Asset.UploadAssetRequest postData
                            )
                            {
                                string skipUrlParamsEscape = "";
                                string urlFormat = "{UploadUrl}";
                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "UploadUrl", uploadUrl);

                                var context = new RequestContext();
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                this.CreateOctetStream(context, postData);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                            
                        var result = string.Empty;
                        var headerETag = context.ResponseHeaders.GetValues("eTag");
                        if (headerETag != null && headerETag.Length > 0)
                        {
                            result = headerETag.First();
                            result = result.TrimEnd('"').TrimStart('"');
                        }
                                return result;
                            }
                                
                                /// <summary>
                                /// To upload an image. Gets back the empty string
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-image
                                /// </remarks>
                                public string UploadImageAsset(
                                      UserAuthorization user 
                                    , string uploadUrl 
                                    , Asset.UploadAssetRequest postData
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    string urlFormat = "{UploadUrl}";
                                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "UploadUrl", uploadUrl);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    this.CreateOctetStream(context, postData);

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleRawResponse(context, System.Text.Encoding.UTF8);
                                    return result;
                                }

                                    /// <summary>
                                    /// To upload an image. Gets back the empty string
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-image
                                    /// </remarks>
                                    public async Task<string> UploadImageAssetAsync(
                                          UserAuthorization user 
                                        , string uploadUrl 
                                        , Asset.UploadAssetRequest postData
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        string urlFormat = "{UploadUrl}";
                                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "UploadUrl", uploadUrl);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        this.CreateOctetStream(context, postData);

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleRawResponse(context, System.Text.Encoding.UTF8);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// Depending on content size, it might take a few minutes for the upload to complete.
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                                        /// </remarks>
                                        public Asset.AssetResult GetAsset(
                                              UserAuthorization user 
                                            , string assetId 
                                        )
                                        {
                                            string skipUrlParamsEscape = "";
                                            string urlFormat = "/v2/assets/{AssetId}";
                                            var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "AssetId", assetId);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "GET";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<Asset.AssetResult>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// Depending on content size, it might take a few minutes for the upload to complete.
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                                            /// </remarks>
                                            public async Task<Asset.AssetResult> GetAssetAsync(
                                                  UserAuthorization user 
                                                , string assetId 
                                            )
                                            {
                                                string skipUrlParamsEscape = "";
                                                string urlFormat = "/v2/assets/{AssetId}";
                                                var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "AssetId", assetId);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "GET";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<Asset.AssetResult>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// To upload video.
                                                /// </summary>
                                                /// <remarks>
                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                                                /// </remarks>
                                                public int CompleteMultiPartUpload(
                                                      UserAuthorization user 
                                                    , Asset.CompleteMultipartUploadRequest postData
                                                )
                                                {
                                                    var url = "/v2/assets?action=completeMultiPartUpload";

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    this.CreateJsonPostStream(context, postData);

                                                    if (!this.ExecuteQuery(context))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = (int)context.HttpStatusCode;
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// To upload video.
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api#upload-the-asset
                                                    /// </remarks>
                                                    public async Task<int> CompleteMultiPartUploadAsync(
                                                          UserAuthorization user 
                                                        , Asset.CompleteMultipartUploadRequest postData
                                                    )
                                                    {
                                                        var url = "/v2/assets?action=completeMultiPartUpload";

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        this.CreateJsonPostStream(context, postData);

                                                        var exec = await this.ExecuteQueryAsync(context);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = (int)context.HttpStatusCode;
                                                        return result;
                                                    }
                                                        
            }
        }

// WriteApiGroup(Targeting)
namespace Sparkle.LinkedInNET.Targeting
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Targeting'
            /// </summary>
            public class TargetingApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal TargetingApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Industry taxonomy is used to standardize data across the LinkedIn platform. Use this API to retrieve standardized URNs and their names.
                /// </summary>
                /// <remarks>
                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/industries
                /// </remarks>
                public Targeting.Industries GetIndustries(
                      UserAuthorization user 
                    , string dataLanguage 
                    , string dataCountry 
                    , int count = 50
                    , int start = 0
                )
                {
                    string skipUrlParamsEscape = "";
                    var url = "/v2/industries";
                    string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}&";
                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    // Requires for GET post tunneling
                    this.CreateTunnelingPostStream(context, query);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Targeting.Industries>(context);
                    return result;
                }

                    /// <summary>
                    /// Industry taxonomy is used to standardize data across the LinkedIn platform. Use this API to retrieve standardized URNs and their names.
                    /// </summary>
                    /// <remarks>
                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/industries
                    /// </remarks>
                    public async Task<Targeting.Industries> GetIndustriesAsync(
                          UserAuthorization user 
                        , string dataLanguage 
                        , string dataCountry 
                        , int count = 50
                        , int start = 0
                    )
                    {
                        string skipUrlParamsEscape = "";
                        var url = "/v2/industries";
                        string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}&";
                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        // Requires for GET post tunneling
                        this.CreateTunnelingPostStream(context, query);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Targeting.Industries>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// 
                        /// </summary>
                        /// <remarks>
                        /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/functions  locale e.g.: en_US
                        /// </remarks>
                        public Targeting.JobFunctions GetJobFunctions(
                              UserAuthorization user 
                            , string dataLocale 
                            , int count = 50
                            , int start = 0
                        )
                        {
                            string skipUrlParamsEscape = "";
                            var url = "/v2/functions";
                            string queryFormat = "locale={dataLocale}&count={int Count = 50}&start={int Start = 0}";
                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLocale", dataLocale, "int Count = 50", count, "int Start = 0", start);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<Targeting.JobFunctions>(context);
                            return result;
                        }

                            /// <summary>
                            /// 
                            /// </summary>
                            /// <remarks>
                            /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/functions  locale e.g.: en_US
                            /// </remarks>
                            public async Task<Targeting.JobFunctions> GetJobFunctionsAsync(
                                  UserAuthorization user 
                                , string dataLocale 
                                , int count = 50
                                , int start = 0
                            )
                            {
                                string skipUrlParamsEscape = "";
                                var url = "/v2/functions";
                                string queryFormat = "locale={dataLocale}&count={int Count = 50}&start={int Start = 0}";
                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLocale", dataLocale, "int Count = 50", count, "int Start = 0", start);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<Targeting.JobFunctions>(context);
                                return result;
                            }
                                
                                /// <summary>
                                /// 
                                /// </summary>
                                /// <remarks>
                                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/country-groups
                                /// </remarks>
                                public Targeting.CountryGroups GetCountryGroups(
                                      UserAuthorization user 
                                    , string dataLanguage 
                                    , string dataCountry 
                                    , int count = 50
                                    , int start = 0
                                )
                                {
                                    string skipUrlParamsEscape = "";
                                    var url = "/v2/countryGroups";
                                    string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}";
                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                                    var context = new RequestContext();
                                    context.UserAuthorization = user;
                                    context.Method =  "POST";
                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                    // Requires for GET post tunneling
                                    this.CreateTunnelingPostStream(context, query);

                                    if (!this.ExecuteQuery(context))
                                        this.HandleJsonErrorResponse(context);
                                    
                                    var result = this.HandleJsonResponse<Targeting.CountryGroups>(context);
                                    return result;
                                }

                                    /// <summary>
                                    /// 
                                    /// </summary>
                                    /// <remarks>
                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/country-groups
                                    /// </remarks>
                                    public async Task<Targeting.CountryGroups> GetCountryGroupsAsync(
                                          UserAuthorization user 
                                        , string dataLanguage 
                                        , string dataCountry 
                                        , int count = 50
                                        , int start = 0
                                    )
                                    {
                                        string skipUrlParamsEscape = "";
                                        var url = "/v2/countryGroups";
                                        string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}";
                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                                        var context = new RequestContext();
                                        context.UserAuthorization = user;
                                        context.Method =  "POST";
                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                        // Requires for GET post tunneling
                                        this.CreateTunnelingPostStream(context, query);

                                        var exec = await this.ExecuteQueryAsync(context);
                                        if (!exec)
                                            this.HandleJsonErrorResponse(context);
                                        
                                        var result = this.HandleJsonResponse<Targeting.CountryGroups>(context);
                                        return result;
                                    }
                                        
                                        /// <summary>
                                        /// 
                                        /// </summary>
                                        /// <remarks>
                                        /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/countries
                                        /// </remarks>
                                        public Targeting.Countries GetCountries(
                                              UserAuthorization user 
                                            , string dataLanguage 
                                            , string dataCountry 
                                            , string countryGroup 
                                            , string countryGroupURN 
                                            , int count = 50
                                            , int start = 0
                                        )
                                        {
                                            string skipUrlParamsEscape = "";
                                            var url = "/v2/countries";
                                            string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={countryGroup}&countryGroup={countryGroupURN}&count={int Count = 50}&start={int Start = 0}";
                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "countryGroup", countryGroup, "countryGroupURN", countryGroupURN, "int Count = 50", count, "int Start = 0", start);

                                            var context = new RequestContext();
                                            context.UserAuthorization = user;
                                            context.Method =  "POST";
                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                            // Requires for GET post tunneling
                                            this.CreateTunnelingPostStream(context, query);

                                            if (!this.ExecuteQuery(context))
                                                this.HandleJsonErrorResponse(context);
                                            
                                            var result = this.HandleJsonResponse<Targeting.Countries>(context);
                                            return result;
                                        }

                                            /// <summary>
                                            /// 
                                            /// </summary>
                                            /// <remarks>
                                            /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/countries
                                            /// </remarks>
                                            public async Task<Targeting.Countries> GetCountriesAsync(
                                                  UserAuthorization user 
                                                , string dataLanguage 
                                                , string dataCountry 
                                                , string countryGroup 
                                                , string countryGroupURN 
                                                , int count = 50
                                                , int start = 0
                                            )
                                            {
                                                string skipUrlParamsEscape = "";
                                                var url = "/v2/countries";
                                                string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={countryGroup}&countryGroup={countryGroupURN}&count={int Count = 50}&start={int Start = 0}";
                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "countryGroup", countryGroup, "countryGroupURN", countryGroupURN, "int Count = 50", count, "int Start = 0", start);

                                                var context = new RequestContext();
                                                context.UserAuthorization = user;
                                                context.Method =  "POST";
                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                // Requires for GET post tunneling
                                                this.CreateTunnelingPostStream(context, query);

                                                var exec = await this.ExecuteQueryAsync(context);
                                                if (!exec)
                                                    this.HandleJsonErrorResponse(context);
                                                
                                                var result = this.HandleJsonResponse<Targeting.Countries>(context);
                                                return result;
                                            }
                                                
                                                /// <summary>
                                                /// 
                                                /// </summary>
                                                /// <remarks>
                                                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/geo-typeahead?tabs=http#geo-typeahead
                                                /// </remarks>
                                                public Targeting.GeoLocations GetGeoLocations(
                                                      UserAuthorization user 
                                                    , string keyword 
                                                    , string language 
                                                    , int count = 50
                                                    , int start = 0
                                                )
                                                {
                                                    string skipUrlParamsEscape = "language";
                                                    var url = "/v2/geoTypeahead";
                                                    string queryFormat = "q=search&query={keyword}&locale=({language})&count={int Count = 50}&start={int Start = 0}";
                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "keyword", keyword, "language", language, "int Count = 50", count, "int Start = 0", start);

                                                    var context = new RequestContext();
                                                    context.UserAuthorization = user;
                                                    context.Method =  "POST";
                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                    // Requires for GET post tunneling
                                                    this.CreateTunnelingPostStream(context, query);

                                                    if (!this.ExecuteQuery(context, true))
                                                        this.HandleJsonErrorResponse(context);
                                                    
                                                    var result = this.HandleJsonResponse<Targeting.GeoLocations>(context);
                                                    return result;
                                                }

                                                    /// <summary>
                                                    /// 
                                                    /// </summary>
                                                    /// <remarks>
                                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/geo-typeahead?tabs=http#geo-typeahead
                                                    /// </remarks>
                                                    public async Task<Targeting.GeoLocations> GetGeoLocationsAsync(
                                                          UserAuthorization user 
                                                        , string keyword 
                                                        , string language 
                                                        , int count = 50
                                                        , int start = 0
                                                    )
                                                    {
                                                        string skipUrlParamsEscape = "language";
                                                        var url = "/v2/geoTypeahead";
                                                        string queryFormat = "q=search&query={keyword}&locale=({language})&count={int Count = 50}&start={int Start = 0}";
                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "keyword", keyword, "language", language, "int Count = 50", count, "int Start = 0", start);

                                                        var context = new RequestContext();
                                                        context.UserAuthorization = user;
                                                        context.Method =  "POST";
                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                        // Requires for GET post tunneling
                                                        this.CreateTunnelingPostStream(context, query);

                                                        var exec = await this.ExecuteQueryAsync(context, true);
                                                        if (!exec)
                                                            this.HandleJsonErrorResponse(context);
                                                        
                                                        var result = this.HandleJsonResponse<Targeting.GeoLocations>(context);
                                                        return result;
                                                    }
                                                        
                                                        /// <summary>
                                                        /// 
                                                        /// </summary>
                                                        /// <remarks>
                                                        /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/states
                                                        /// </remarks>
                                                        public Targeting.States GetStates(
                                                              UserAuthorization user 
                                                            , string dataLanguage 
                                                            , string dataCountry 
                                                            , string country 
                                                            , string countryURN 
                                                            , int count = 50
                                                            , int start = 0
                                                        )
                                                        {
                                                            string skipUrlParamsEscape = "";
                                                            var url = "/v2/states";
                                                            string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={country}&country={countryURN}&count={int Count = 50}&start={int Start = 0}";
                                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "country", country, "countryURN", countryURN, "int Count = 50", count, "int Start = 0", start);

                                                            var context = new RequestContext();
                                                            context.UserAuthorization = user;
                                                            context.Method =  "POST";
                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                            // Requires for GET post tunneling
                                                            this.CreateTunnelingPostStream(context, query);

                                                            if (!this.ExecuteQuery(context))
                                                                this.HandleJsonErrorResponse(context);
                                                            
                                                            var result = this.HandleJsonResponse<Targeting.States>(context);
                                                            return result;
                                                        }

                                                            /// <summary>
                                                            /// 
                                                            /// </summary>
                                                            /// <remarks>
                                                            /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/states
                                                            /// </remarks>
                                                            public async Task<Targeting.States> GetStatesAsync(
                                                                  UserAuthorization user 
                                                                , string dataLanguage 
                                                                , string dataCountry 
                                                                , string country 
                                                                , string countryURN 
                                                                , int count = 50
                                                                , int start = 0
                                                            )
                                                            {
                                                                string skipUrlParamsEscape = "";
                                                                var url = "/v2/states";
                                                                string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={country}&country={countryURN}&count={int Count = 50}&start={int Start = 0}";
                                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "country", country, "countryURN", countryURN, "int Count = 50", count, "int Start = 0", start);

                                                                var context = new RequestContext();
                                                                context.UserAuthorization = user;
                                                                context.Method =  "POST";
                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                // Requires for GET post tunneling
                                                                this.CreateTunnelingPostStream(context, query);

                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                if (!exec)
                                                                    this.HandleJsonErrorResponse(context);
                                                                
                                                                var result = this.HandleJsonResponse<Targeting.States>(context);
                                                                return result;
                                                            }
                                                                
                                                                /// <summary>
                                                                /// 
                                                                /// </summary>
                                                                /// <remarks>
                                                                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions
                                                                /// </remarks>
                                                                public Targeting.Regions GetRegions(
                                                                      UserAuthorization user 
                                                                    , string dataLanguage 
                                                                    , string dataCountry 
                                                                    , string states 
                                                                    , string statesURN 
                                                                    , int count = 50
                                                                    , int start = 0
                                                                )
                                                                {
                                                                    string skipUrlParamsEscape = "";
                                                                    var url = "/v2/regions";
                                                                    string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={states}&states={statesURN}&count={int Count = 50}&start={int Start = 0}";
                                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "states", states, "statesURN", statesURN, "int Count = 50", count, "int Start = 0", start);

                                                                    var context = new RequestContext();
                                                                    context.UserAuthorization = user;
                                                                    context.Method =  "POST";
                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                    // Requires for GET post tunneling
                                                                    this.CreateTunnelingPostStream(context, query);

                                                                    if (!this.ExecuteQuery(context))
                                                                        this.HandleJsonErrorResponse(context);
                                                                    
                                                                    var result = this.HandleJsonResponse<Targeting.Regions>(context);
                                                                    return result;
                                                                }

                                                                    /// <summary>
                                                                    /// 
                                                                    /// </summary>
                                                                    /// <remarks>
                                                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions
                                                                    /// </remarks>
                                                                    public async Task<Targeting.Regions> GetRegionsAsync(
                                                                          UserAuthorization user 
                                                                        , string dataLanguage 
                                                                        , string dataCountry 
                                                                        , string states 
                                                                        , string statesURN 
                                                                        , int count = 50
                                                                        , int start = 0
                                                                    )
                                                                    {
                                                                        string skipUrlParamsEscape = "";
                                                                        var url = "/v2/regions";
                                                                        string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&q={states}&states={statesURN}&count={int Count = 50}&start={int Start = 0}";
                                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "states", states, "statesURN", statesURN, "int Count = 50", count, "int Start = 0", start);

                                                                        var context = new RequestContext();
                                                                        context.UserAuthorization = user;
                                                                        context.Method =  "POST";
                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                        // Requires for GET post tunneling
                                                                        this.CreateTunnelingPostStream(context, query);

                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                        if (!exec)
                                                                            this.HandleJsonErrorResponse(context);
                                                                        
                                                                        var result = this.HandleJsonResponse<Targeting.Regions>(context);
                                                                        return result;
                                                                    }
                                                                        
                                                                        /// <summary>
                                                                        /// 
                                                                        /// </summary>
                                                                        /// <remarks>
                                                                        /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/seniorities
                                                                        /// </remarks>
                                                                        public Targeting.Seniorities GetSeniorities(
                                                                              UserAuthorization user 
                                                                            , string dataLanguage 
                                                                            , string dataCountry 
                                                                            , int count = 50
                                                                            , int start = 0
                                                                        )
                                                                        {
                                                                            string skipUrlParamsEscape = "";
                                                                            var url = "/v2/seniorities";
                                                                            string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}";
                                                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                                                                            var context = new RequestContext();
                                                                            context.UserAuthorization = user;
                                                                            context.Method =  "POST";
                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                            // Requires for GET post tunneling
                                                                            this.CreateTunnelingPostStream(context, query);

                                                                            if (!this.ExecuteQuery(context))
                                                                                this.HandleJsonErrorResponse(context);
                                                                            
                                                                            var result = this.HandleJsonResponse<Targeting.Seniorities>(context);
                                                                            return result;
                                                                        }

                                                                            /// <summary>
                                                                            /// 
                                                                            /// </summary>
                                                                            /// <remarks>
                                                                            /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/seniorities
                                                                            /// </remarks>
                                                                            public async Task<Targeting.Seniorities> GetSenioritiesAsync(
                                                                                  UserAuthorization user 
                                                                                , string dataLanguage 
                                                                                , string dataCountry 
                                                                                , int count = 50
                                                                                , int start = 0
                                                                            )
                                                                            {
                                                                                string skipUrlParamsEscape = "";
                                                                                var url = "/v2/seniorities";
                                                                                string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}&count={int Count = 50}&start={int Start = 0}";
                                                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry, "int Count = 50", count, "int Start = 0", start);

                                                                                var context = new RequestContext();
                                                                                context.UserAuthorization = user;
                                                                                context.Method =  "POST";
                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                // Requires for GET post tunneling
                                                                                this.CreateTunnelingPostStream(context, query);

                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                if (!exec)
                                                                                    this.HandleJsonErrorResponse(context);
                                                                                
                                                                                var result = this.HandleJsonResponse<Targeting.Seniorities>(context);
                                                                                return result;
                                                                            }
                                                                                
                                                                                /// <summary>
                                                                                /// Forecast the reach of the target audience
                                                                                /// </summary>
                                                                                /// <remarks>
                                                                                /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/advertising-targeting/audience-counts
                                                                                /// </remarks>
                                                                                public Targeting.AudienceCounts GetAudienceCounts(
                                                                                      UserAuthorization user 
                                                                                    , string targetingCriteria 
                                                                                )
                                                                                {
                                                                                    string skipUrlParamsEscape = "targetingCriteria";
                                                                                    var url = "/v2/audienceCountsV2";
                                                                                    string queryFormat = "q=targetingCriteriaV2&targetingCriteria={targetingCriteria}";
                                                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "targetingCriteria", targetingCriteria);

                                                                                    var context = new RequestContext();
                                                                                    context.UserAuthorization = user;
                                                                                    context.Method =  "POST";
                                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                    // Requires for GET post tunneling
                                                                                    this.CreateTunnelingPostStream(context, query);

                                                                                    if (!this.ExecuteQuery(context, true))
                                                                                        this.HandleJsonErrorResponse(context);
                                                                                    
                                                                                    var result = this.HandleJsonResponse<Targeting.AudienceCounts>(context);
                                                                                    return result;
                                                                                }

                                                                                    /// <summary>
                                                                                    /// Forecast the reach of the target audience
                                                                                    /// </summary>
                                                                                    /// <remarks>
                                                                                    /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/advertising-targeting/audience-counts
                                                                                    /// </remarks>
                                                                                    public async Task<Targeting.AudienceCounts> GetAudienceCountsAsync(
                                                                                          UserAuthorization user 
                                                                                        , string targetingCriteria 
                                                                                    )
                                                                                    {
                                                                                        string skipUrlParamsEscape = "targetingCriteria";
                                                                                        var url = "/v2/audienceCountsV2";
                                                                                        string queryFormat = "q=targetingCriteriaV2&targetingCriteria={targetingCriteria}";
                                                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "targetingCriteria", targetingCriteria);

                                                                                        var context = new RequestContext();
                                                                                        context.UserAuthorization = user;
                                                                                        context.Method =  "POST";
                                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                        // Requires for GET post tunneling
                                                                                        this.CreateTunnelingPostStream(context, query);

                                                                                        var exec = await this.ExecuteQueryAsync(context, true);
                                                                                        if (!exec)
                                                                                            this.HandleJsonErrorResponse(context);
                                                                                        
                                                                                        var result = this.HandleJsonResponse<Targeting.AudienceCounts>(context);
                                                                                        return result;
                                                                                    }
                                                                                        
                                                                                        /// <summary>
                                                                                        /// Forecast the reach of your target audience
                                                                                        /// </summary>
                                                                                        /// <remarks>
                                                                                        /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/advertising-targeting/audience-counts
                                                                                        /// </remarks>
                                                                                        public Targeting.TargetingFacets GetTargetingFacets(
                                                                                              UserAuthorization user 
                                                                                        )
                                                                                        {
                                                                                            var url = "/v2/adTargetingFacets";

                                                                                            var context = new RequestContext();
                                                                                            context.UserAuthorization = user;
                                                                                            context.Method =  "GET";
                                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                            if (!this.ExecuteQuery(context))
                                                                                                this.HandleJsonErrorResponse(context);
                                                                                            
                                                                                            var result = this.HandleJsonResponse<Targeting.TargetingFacets>(context);
                                                                                            return result;
                                                                                        }

                                                                                            /// <summary>
                                                                                            /// Forecast the reach of your target audience
                                                                                            /// </summary>
                                                                                            /// <remarks>
                                                                                            /// See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/advertising-targeting/audience-counts
                                                                                            /// </remarks>
                                                                                            public async Task<Targeting.TargetingFacets> GetTargetingFacetsAsync(
                                                                                                  UserAuthorization user 
                                                                                            )
                                                                                            {
                                                                                                var url = "/v2/adTargetingFacets";

                                                                                                var context = new RequestContext();
                                                                                                context.UserAuthorization = user;
                                                                                                context.Method =  "GET";
                                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

                                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                                if (!exec)
                                                                                                    this.HandleJsonErrorResponse(context);
                                                                                                
                                                                                                var result = this.HandleJsonResponse<Targeting.TargetingFacets>(context);
                                                                                                return result;
                                                                                            }
                                                                                                
                                                                                                /// <summary>
                                                                                                /// 
                                                                                                /// </summary>
                                                                                                /// <remarks>
                                                                                                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/countries#get-all
                                                                                                /// </remarks>
                                                                                                public Targeting.Countries GetAllCountries(
                                                                                                      UserAuthorization user 
                                                                                                    , string dataLanguage 
                                                                                                    , string dataCountry 
                                                                                                )
                                                                                                {
                                                                                                    string skipUrlParamsEscape = "";
                                                                                                    var url = "/v2/countries";
                                                                                                    string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                    var context = new RequestContext();
                                                                                                    context.UserAuthorization = user;
                                                                                                    context.Method =  "POST";
                                                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                    // Requires for GET post tunneling
                                                                                                    this.CreateTunnelingPostStream(context, query);

                                                                                                    if (!this.ExecuteQuery(context))
                                                                                                        this.HandleJsonErrorResponse(context);
                                                                                                    
                                                                                                    var result = this.HandleJsonResponse<Targeting.Countries>(context);
                                                                                                    return result;
                                                                                                }

                                                                                                    /// <summary>
                                                                                                    /// 
                                                                                                    /// </summary>
                                                                                                    /// <remarks>
                                                                                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/countries#get-all
                                                                                                    /// </remarks>
                                                                                                    public async Task<Targeting.Countries> GetAllCountriesAsync(
                                                                                                          UserAuthorization user 
                                                                                                        , string dataLanguage 
                                                                                                        , string dataCountry 
                                                                                                    )
                                                                                                    {
                                                                                                        string skipUrlParamsEscape = "";
                                                                                                        var url = "/v2/countries";
                                                                                                        string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                        var context = new RequestContext();
                                                                                                        context.UserAuthorization = user;
                                                                                                        context.Method =  "POST";
                                                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                        // Requires for GET post tunneling
                                                                                                        this.CreateTunnelingPostStream(context, query);

                                                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                                                        if (!exec)
                                                                                                            this.HandleJsonErrorResponse(context);
                                                                                                        
                                                                                                        var result = this.HandleJsonResponse<Targeting.Countries>(context);
                                                                                                        return result;
                                                                                                    }
                                                                                                        
                                                                                                        /// <summary>
                                                                                                        /// 
                                                                                                        /// </summary>
                                                                                                        /// <remarks>
                                                                                                        /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/states#get-all
                                                                                                        /// </remarks>
                                                                                                        public Targeting.States GetAllStates(
                                                                                                              UserAuthorization user 
                                                                                                            , string dataLanguage 
                                                                                                            , string dataCountry 
                                                                                                        )
                                                                                                        {
                                                                                                            string skipUrlParamsEscape = "";
                                                                                                            var url = "/v2/states";
                                                                                                            string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                            var context = new RequestContext();
                                                                                                            context.UserAuthorization = user;
                                                                                                            context.Method =  "POST";
                                                                                                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                            // Requires for GET post tunneling
                                                                                                            this.CreateTunnelingPostStream(context, query);

                                                                                                            if (!this.ExecuteQuery(context))
                                                                                                                this.HandleJsonErrorResponse(context);
                                                                                                            
                                                                                                            var result = this.HandleJsonResponse<Targeting.States>(context);
                                                                                                            return result;
                                                                                                        }

                                                                                                            /// <summary>
                                                                                                            /// 
                                                                                                            /// </summary>
                                                                                                            /// <remarks>
                                                                                                            /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/states#get-all
                                                                                                            /// </remarks>
                                                                                                            public async Task<Targeting.States> GetAllStatesAsync(
                                                                                                                  UserAuthorization user 
                                                                                                                , string dataLanguage 
                                                                                                                , string dataCountry 
                                                                                                            )
                                                                                                            {
                                                                                                                string skipUrlParamsEscape = "";
                                                                                                                var url = "/v2/states";
                                                                                                                string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                                var context = new RequestContext();
                                                                                                                context.UserAuthorization = user;
                                                                                                                context.Method =  "POST";
                                                                                                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                                // Requires for GET post tunneling
                                                                                                                this.CreateTunnelingPostStream(context, query);

                                                                                                                var exec = await this.ExecuteQueryAsync(context);
                                                                                                                if (!exec)
                                                                                                                    this.HandleJsonErrorResponse(context);
                                                                                                                
                                                                                                                var result = this.HandleJsonResponse<Targeting.States>(context);
                                                                                                                return result;
                                                                                                            }
                                                                                                                
                                                                                                                /// <summary>
                                                                                                                /// 
                                                                                                                /// </summary>
                                                                                                                /// <remarks>
                                                                                                                /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions#get-all
                                                                                                                /// </remarks>
                                                                                                                public Targeting.Regions GetAllRegions(
                                                                                                                      UserAuthorization user 
                                                                                                                    , string dataLanguage 
                                                                                                                    , string dataCountry 
                                                                                                                )
                                                                                                                {
                                                                                                                    string skipUrlParamsEscape = "";
                                                                                                                    var url = "/v2/regions";
                                                                                                                    string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                                    var context = new RequestContext();
                                                                                                                    context.UserAuthorization = user;
                                                                                                                    context.Method =  "POST";
                                                                                                                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                                    // Requires for GET post tunneling
                                                                                                                    this.CreateTunnelingPostStream(context, query);

                                                                                                                    if (!this.ExecuteQuery(context))
                                                                                                                        this.HandleJsonErrorResponse(context);
                                                                                                                    
                                                                                                                    var result = this.HandleJsonResponse<Targeting.Regions>(context);
                                                                                                                    return result;
                                                                                                                }

                                                                                                                    /// <summary>
                                                                                                                    /// 
                                                                                                                    /// </summary>
                                                                                                                    /// <remarks>
                                                                                                                    /// See https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions#get-all
                                                                                                                    /// </remarks>
                                                                                                                    public async Task<Targeting.Regions> GetAllRegionsAsync(
                                                                                                                          UserAuthorization user 
                                                                                                                        , string dataLanguage 
                                                                                                                        , string dataCountry 
                                                                                                                    )
                                                                                                                    {
                                                                                                                        string skipUrlParamsEscape = "";
                                                                                                                        var url = "/v2/regions";
                                                                                                                        string queryFormat = "locale.language={dataLanguage}&locale.country={dataCountry}";
                                                                                                                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "dataLanguage", dataLanguage, "dataCountry", dataCountry);

                                                                                                                        var context = new RequestContext();
                                                                                                                        context.UserAuthorization = user;
                                                                                                                        context.Method =  "POST";
                                                                                                                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                                                                                                        // Requires for GET post tunneling
                                                                                                                        this.CreateTunnelingPostStream(context, query);

                                                                                                                        var exec = await this.ExecuteQueryAsync(context);
                                                                                                                        if (!exec)
                                                                                                                            this.HandleJsonErrorResponse(context);
                                                                                                                        
                                                                                                                        var result = this.HandleJsonResponse<Targeting.Regions>(context);
                                                                                                                        return result;
                                                                                                                    }
                                                                                                                        
            }
        }

// WriteApiGroup(Region)
namespace Sparkle.LinkedInNET.Region
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Region'
            /// </summary>
            public class RegionApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal RegionApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// Retrieve standardized region URNs and their names by code
                /// </summary>
                /// <remarks>
                /// https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions
                /// </remarks>
                public Targeting.TargetingRegion GetRegion(
                      UserAuthorization user 
                    , string id 
                )
                {
                    string skipUrlParamsEscape = "";
                    string urlFormat = "/v2/regions/{id}";
                    var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "id", id);
                    var query = "locale.language=en&locale.country=US";

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    // Requires for GET post tunneling
                    this.CreateTunnelingPostStream(context, query);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Targeting.TargetingRegion>(context);
                    return result;
                }

                    /// <summary>
                    /// Retrieve standardized region URNs and their names by code
                    /// </summary>
                    /// <remarks>
                    /// https://docs.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data/locations/regions
                    /// </remarks>
                    public async Task<Targeting.TargetingRegion> GetRegionAsync(
                          UserAuthorization user 
                        , string id 
                    )
                    {
                        string skipUrlParamsEscape = "";
                        string urlFormat = "/v2/regions/{id}";
                        var url = FormatUrl(urlFormat, default(FieldSelector), skipUrlParamsEscape, "id", id);
                        var query = "locale.language=en&locale.country=US";

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        // Requires for GET post tunneling
                        this.CreateTunnelingPostStream(context, query);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Targeting.TargetingRegion>(context);
                        return result;
                    }
                        
            }
        }

// WriteApiGroup(Ads)
namespace Sparkle.LinkedInNET.Ads
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Ads'
            /// </summary>
            public class AdsApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal AdsApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
                /// <summary>
                /// 
                /// </summary>
                public Ads.AdAnalytics GetAdAnalytics(
                      UserAuthorization user 
                    , string postId 
                )
                {
                    string skipUrlParamsEscape = "";
                    var url = "/v2/adAnalyticsV2";
                    string queryFormat = "q=statistics&pivots[0]=SHARE&dateRange.start.day=" + DateTime.Now.Day + "&dateRange.start.month=" + DateTime.Now.Month + "&dateRange.start.year=" + DateTime.Now.Year + "&timeGranularity=DAILY&shares[0]=urn:li:share:{postId}";
                    var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "postId", postId);

                    var context = new RequestContext();
                    context.UserAuthorization = user;
                    context.Method =  "POST";
                    context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                    // Requires for GET post tunneling
                    this.CreateTunnelingPostStream(context, query);

                    if (!this.ExecuteQuery(context))
                        this.HandleJsonErrorResponse(context);
                    
                    var result = this.HandleJsonResponse<Ads.AdAnalytics>(context);
                    return result;
                }

                    /// <summary>
                    /// 
                    /// </summary>
                    public async Task<Ads.AdAnalytics> GetAdAnalyticsAsync(
                          UserAuthorization user 
                        , string postId 
                    )
                    {
                        string skipUrlParamsEscape = "";
                        var url = "/v2/adAnalyticsV2";
                        string queryFormat = "q=statistics&pivots[0]=SHARE&dateRange.start.day=" + DateTime.Now.Day + "&dateRange.start.month=" + DateTime.Now.Month + "&dateRange.start.year=" + DateTime.Now.Year + "&timeGranularity=DAILY&shares[0]=urn:li:share:{postId}";
                        var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "postId", postId);

                        var context = new RequestContext();
                        context.UserAuthorization = user;
                        context.Method =  "POST";
                        context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                        // Requires for GET post tunneling
                        this.CreateTunnelingPostStream(context, query);

                        var exec = await this.ExecuteQueryAsync(context);
                        if (!exec)
                            this.HandleJsonErrorResponse(context);
                        
                        var result = this.HandleJsonResponse<Ads.AdAnalytics>(context);
                        return result;
                    }
                        
                        /// <summary>
                        /// 
                        /// </summary>
                        public Ads.AdAnalytics GetAdSharePostAnalytics(
                              UserAuthorization user 
                            , string postId 
                        )
                        {
                            string skipUrlParamsEscape = "";
                            var url = "/v2/adAnalyticsV2";
                            string queryFormat = "q=statistics&pivots[0]=SHARE&dateRange.start.day=" + DateTime.Now.Day + "&dateRange.start.month=" + DateTime.Now.Month + "&dateRange.start.year=" + DateTime.Now.Year + "&timeGranularity=DAILY&fields=follows,likes,comments,clicks,actionClicks,adUnitClicks,shares,otherEngagements,totalEngagements,impressions,companyPageClicks,landingPageClicks,viralImpressions,viralTotalEngagements&shares[0]={postId}";
                            var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "postId", postId);

                            var context = new RequestContext();
                            context.UserAuthorization = user;
                            context.Method =  "POST";
                            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                            // Requires for GET post tunneling
                            this.CreateTunnelingPostStream(context, query);

                            if (!this.ExecuteQuery(context))
                                this.HandleJsonErrorResponse(context);
                            
                            var result = this.HandleJsonResponse<Ads.AdAnalytics>(context);
                            return result;
                        }

                            /// <summary>
                            /// 
                            /// </summary>
                            public async Task<Ads.AdAnalytics> GetAdSharePostAnalyticsAsync(
                                  UserAuthorization user 
                                , string postId 
                            )
                            {
                                string skipUrlParamsEscape = "";
                                var url = "/v2/adAnalyticsV2";
                                string queryFormat = "q=statistics&pivots[0]=SHARE&dateRange.start.day=" + DateTime.Now.Day + "&dateRange.start.month=" + DateTime.Now.Month + "&dateRange.start.year=" + DateTime.Now.Year + "&timeGranularity=DAILY&fields=follows,likes,comments,clicks,actionClicks,adUnitClicks,shares,otherEngagements,totalEngagements,impressions,companyPageClicks,landingPageClicks,viralImpressions,viralTotalEngagements&shares[0]={postId}";
                                var query = FormatQuery(queryFormat, default(FieldSelector), skipUrlParamsEscape, "postId", postId);

                                var context = new RequestContext();
                                context.UserAuthorization = user;
                                context.Method =  "POST";
                                context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
                                // Requires for GET post tunneling
                                this.CreateTunnelingPostStream(context, query);

                                var exec = await this.ExecuteQueryAsync(context);
                                if (!exec)
                                    this.HandleJsonErrorResponse(context);
                                
                                var result = this.HandleJsonResponse<Ads.AdAnalytics>(context);
                                return result;
                            }
                                
            }
        }

// WriteApiGroup(Common)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Xml.Serialization;
        using System.Threading.Tasks;
            using Sparkle.LinkedInNET.Internals;
            using System.Linq;

            /// <summary>
            /// Name: 'Common'
            /// </summary>
            public class CommonApi : BaseApi
            {
                [System.Diagnostics.DebuggerStepThrough]
                internal CommonApi(LinkedInApi linkedInApi)
                    : base(linkedInApi)
                {
                }
                
            }
        }

// WriteRootServices()
namespace Sparkle.LinkedInNET
{
    using System;
    using System.Xml.Serialization;
    using System.Linq;
    using Sparkle.LinkedInNET.Internals;
    using Sparkle.LinkedInNET.Profiles;
    using Sparkle.LinkedInNET.Organizations;
    using Sparkle.LinkedInNET.Shares;
    using Sparkle.LinkedInNET.Videos;
    using Sparkle.LinkedInNET.Media;
    using Sparkle.LinkedInNET.UGCPost;
    using Sparkle.LinkedInNET.SocialActions;
    using Sparkle.LinkedInNET.Asset;
    using Sparkle.LinkedInNET.Targeting;
    using Sparkle.LinkedInNET.Region;
    using Sparkle.LinkedInNET.Ads;
    using Sparkle.LinkedInNET.Common;

    /// <summary>
    /// The factory for LinkedIn APIs.
    /// </summary>
    public partial class LinkedInApi : BaseApi
    {
        /// <summary>
        /// The Profiles API.
        /// </summary>
        public ProfilesApi Profiles {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new ProfilesApi(this); }
        }

        /// <summary>
        /// The Organizations API.
        /// </summary>
        public OrganizationsApi Organizations {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new OrganizationsApi(this); }
        }

        /// <summary>
        /// The Shares API.
        /// </summary>
        public SharesApi Shares {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new SharesApi(this); }
        }

        /// <summary>
        /// The Videos API.
        /// </summary>
        public VideosApi Videos {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new VideosApi(this); }
        }

        /// <summary>
        /// The Media API.
        /// </summary>
        public MediaApi Media {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new MediaApi(this); }
        }

        /// <summary>
        /// The UGCPost API.
        /// </summary>
        public UGCPostApi UGCPost {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new UGCPostApi(this); }
        }

        /// <summary>
        /// The SocialActions API.
        /// </summary>
        public SocialActionsApi SocialActions {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new SocialActionsApi(this); }
        }

        /// <summary>
        /// The Asset API.
        /// </summary>
        public AssetApi Asset {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new AssetApi(this); }
        }

        /// <summary>
        /// The Targeting API.
        /// </summary>
        public TargetingApi Targeting {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new TargetingApi(this); }
        }

        /// <summary>
        /// The Region API.
        /// </summary>
        public RegionApi Region {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new RegionApi(this); }
        }

        /// <summary>
        /// The Ads API.
        /// </summary>
        public AdsApi Ads {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new AdsApi(this); }
        }

        /// <summary>
        /// The Common API.
        /// </summary>
        public CommonApi Common {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new CommonApi(this); }
        }

    }
}

#endregion


